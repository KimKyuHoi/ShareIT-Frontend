{"ast":null,"code":"import { warning } from '../../../utils/errors.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\nvar safeMin = 0.001;\nvar minDuration = 0.01;\nvar maxDuration = 10.0;\nvar minDamping = 0.05;\nvar maxDamping = 1;\nfunction findSpring(_ref) {\n  var _ref$duration = _ref.duration,\n    duration = _ref$duration === void 0 ? 800 : _ref$duration,\n    _ref$bounce = _ref.bounce,\n    bounce = _ref$bounce === void 0 ? 0.25 : _ref$bounce,\n    _ref$velocity = _ref.velocity,\n    velocity = _ref$velocity === void 0 ? 0 : _ref$velocity,\n    _ref$mass = _ref.mass,\n    mass = _ref$mass === void 0 ? 1 : _ref$mass;\n  var envelope;\n  var derivative;\n  warning(duration <= secondsToMilliseconds(maxDuration), \"Spring duration must be 10 seconds or less\");\n  var dampingRatio = 1 - bounce;\n  /**\r\n   * Restrict dampingRatio and duration to within acceptable ranges.\r\n   */\n  dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n  duration = clamp(minDuration, maxDuration, millisecondsToSeconds(duration));\n  if (dampingRatio < 1) {\n    /**\r\n     * Underdamped spring\r\n     */\n    envelope = function envelope(undampedFreq) {\n      var exponentialDecay = undampedFreq * dampingRatio;\n      var delta = exponentialDecay * duration;\n      var a = exponentialDecay - velocity;\n      var b = calcAngularFreq(undampedFreq, dampingRatio);\n      var c = Math.exp(-delta);\n      return safeMin - a / b * c;\n    };\n    derivative = function derivative(undampedFreq) {\n      var exponentialDecay = undampedFreq * dampingRatio;\n      var delta = exponentialDecay * duration;\n      var d = delta * velocity + velocity;\n      var e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n      var f = Math.exp(-delta);\n      var g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n      var factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n      return factor * ((d - e) * f) / g;\n    };\n  } else {\n    /**\r\n     * Critically-damped spring\r\n     */\n    envelope = function envelope(undampedFreq) {\n      var a = Math.exp(-undampedFreq * duration);\n      var b = (undampedFreq - velocity) * duration + 1;\n      return -safeMin + a * b;\n    };\n    derivative = function derivative(undampedFreq) {\n      var a = Math.exp(-undampedFreq * duration);\n      var b = (velocity - undampedFreq) * (duration * duration);\n      return a * b;\n    };\n  }\n  var initialGuess = 5 / duration;\n  var undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n  duration = secondsToMilliseconds(duration);\n  if (isNaN(undampedFreq)) {\n    return {\n      stiffness: 100,\n      damping: 10,\n      duration: duration\n    };\n  } else {\n    var stiffness = Math.pow(undampedFreq, 2) * mass;\n    return {\n      stiffness: stiffness,\n      damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n      duration: duration\n    };\n  }\n}\nvar rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n  var result = initialGuess;\n  for (var i = 1; i < rootIterations; i++) {\n    result = result - envelope(result) / derivative(result);\n  }\n  return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n  return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\nexport { calcAngularFreq, findSpring, maxDamping, maxDuration, minDamping, minDuration };","map":{"version":3,"names":["warning","clamp","secondsToMilliseconds","millisecondsToSeconds","safeMin","minDuration","maxDuration","minDamping","maxDamping","findSpring","_ref","_ref$duration","duration","_ref$bounce","bounce","_ref$velocity","velocity","_ref$mass","mass","envelope","derivative","dampingRatio","undampedFreq","exponentialDecay","delta","a","b","calcAngularFreq","c","Math","exp","d","e","pow","f","g","factor","initialGuess","approximateRoot","isNaN","stiffness","damping","sqrt","rootIterations","result","i"],"sources":["C:/Users/k546k/Desktop/멋쟁이사자/쉐어잇/shareit_frontend/node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs"],"sourcesContent":["import { warning } from '../../../utils/errors.mjs';\r\nimport { clamp } from '../../../utils/clamp.mjs';\r\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\r\n\r\nconst safeMin = 0.001;\r\nconst minDuration = 0.01;\r\nconst maxDuration = 10.0;\r\nconst minDamping = 0.05;\r\nconst maxDamping = 1;\r\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {\r\n    let envelope;\r\n    let derivative;\r\n    warning(duration <= secondsToMilliseconds(maxDuration), \"Spring duration must be 10 seconds or less\");\r\n    let dampingRatio = 1 - bounce;\r\n    /**\r\n     * Restrict dampingRatio and duration to within acceptable ranges.\r\n     */\r\n    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\r\n    duration = clamp(minDuration, maxDuration, millisecondsToSeconds(duration));\r\n    if (dampingRatio < 1) {\r\n        /**\r\n         * Underdamped spring\r\n         */\r\n        envelope = (undampedFreq) => {\r\n            const exponentialDecay = undampedFreq * dampingRatio;\r\n            const delta = exponentialDecay * duration;\r\n            const a = exponentialDecay - velocity;\r\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\r\n            const c = Math.exp(-delta);\r\n            return safeMin - (a / b) * c;\r\n        };\r\n        derivative = (undampedFreq) => {\r\n            const exponentialDecay = undampedFreq * dampingRatio;\r\n            const delta = exponentialDecay * duration;\r\n            const d = delta * velocity + velocity;\r\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\r\n            const f = Math.exp(-delta);\r\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\r\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\r\n            return (factor * ((d - e) * f)) / g;\r\n        };\r\n    }\r\n    else {\r\n        /**\r\n         * Critically-damped spring\r\n         */\r\n        envelope = (undampedFreq) => {\r\n            const a = Math.exp(-undampedFreq * duration);\r\n            const b = (undampedFreq - velocity) * duration + 1;\r\n            return -safeMin + a * b;\r\n        };\r\n        derivative = (undampedFreq) => {\r\n            const a = Math.exp(-undampedFreq * duration);\r\n            const b = (velocity - undampedFreq) * (duration * duration);\r\n            return a * b;\r\n        };\r\n    }\r\n    const initialGuess = 5 / duration;\r\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\r\n    duration = secondsToMilliseconds(duration);\r\n    if (isNaN(undampedFreq)) {\r\n        return {\r\n            stiffness: 100,\r\n            damping: 10,\r\n            duration,\r\n        };\r\n    }\r\n    else {\r\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\r\n        return {\r\n            stiffness,\r\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\r\n            duration,\r\n        };\r\n    }\r\n}\r\nconst rootIterations = 12;\r\nfunction approximateRoot(envelope, derivative, initialGuess) {\r\n    let result = initialGuess;\r\n    for (let i = 1; i < rootIterations; i++) {\r\n        result = result - envelope(result) / derivative(result);\r\n    }\r\n    return result;\r\n}\r\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\r\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\r\n}\r\n\r\nexport { calcAngularFreq, findSpring, maxDamping, maxDuration, minDamping, minDuration };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}