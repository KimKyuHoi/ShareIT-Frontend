{"ast":null,"code":"import _toConsumableArray from \"C:/Users/k546k/Desktop/\\uBA4B\\uC7C1\\uC774\\uC0AC\\uC790/\\uC250\\uC5B4\\uC787/shareit_frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { calcInset } from './inset.mjs';\nimport { ScrollOffset } from './presets.mjs';\nimport { resolveOffset } from './offset.mjs';\nimport { interpolate } from '../../../../utils/interpolate.mjs';\nimport { defaultOffset } from '../../../../utils/offsets/default.mjs';\nvar point = {\n  x: 0,\n  y: 0\n};\nfunction resolveOffsets(container, info, options) {\n  var _options$offset = options.offset,\n    offsetDefinition = _options$offset === void 0 ? ScrollOffset.All : _options$offset;\n  var _options$target = options.target,\n    target = _options$target === void 0 ? container : _options$target,\n    _options$axis = options.axis,\n    axis = _options$axis === void 0 ? \"y\" : _options$axis;\n  var lengthLabel = axis === \"y\" ? \"height\" : \"width\";\n  var inset = target !== container ? calcInset(target, container) : point;\n  /**\r\n   * Measure the target and container. If they're the same thing then we\r\n   * use the container's scrollWidth/Height as the target, from there\r\n   * all other calculations can remain the same.\r\n   */\n  var targetSize = target === container ? {\n    width: container.scrollWidth,\n    height: container.scrollHeight\n  } : {\n    width: target.clientWidth,\n    height: target.clientHeight\n  };\n  var containerSize = {\n    width: container.clientWidth,\n    height: container.clientHeight\n  };\n  /**\r\n   * Reset the length of the resolved offset array rather than creating a new one.\r\n   * TODO: More reusable data structures for targetSize/containerSize would also be good.\r\n   */\n  info[axis].offset.length = 0;\n  /**\r\n   * Populate the offset array by resolving the user's offset definition into\r\n   * a list of pixel scroll offets.\r\n   */\n  var hasChanged = !info[axis].interpolate;\n  var numOffsets = offsetDefinition.length;\n  for (var i = 0; i < numOffsets; i++) {\n    var offset = resolveOffset(offsetDefinition[i], containerSize[lengthLabel], targetSize[lengthLabel], inset[axis]);\n    if (!hasChanged && offset !== info[axis].interpolatorOffsets[i]) {\n      hasChanged = true;\n    }\n    info[axis].offset[i] = offset;\n  }\n  /**\r\n   * If the pixel scroll offsets have changed, create a new interpolator function\r\n   * to map scroll value into a progress.\r\n   */\n  if (hasChanged) {\n    info[axis].interpolate = interpolate(info[axis].offset, defaultOffset(offsetDefinition));\n    info[axis].interpolatorOffsets = _toConsumableArray(info[axis].offset);\n  }\n  info[axis].progress = info[axis].interpolate(info[axis].current);\n}\nexport { resolveOffsets };","map":{"version":3,"names":["calcInset","ScrollOffset","resolveOffset","interpolate","defaultOffset","point","x","y","resolveOffsets","container","info","options","_options$offset","offset","offsetDefinition","All","_options$target","target","_options$axis","axis","lengthLabel","inset","targetSize","width","scrollWidth","height","scrollHeight","clientWidth","clientHeight","containerSize","length","hasChanged","numOffsets","i","interpolatorOffsets","_toConsumableArray","progress","current"],"sources":["C:/Users/k546k/Desktop/멋쟁이사자/쉐어잇/shareit_frontend/node_modules/framer-motion/dist/es/render/dom/scroll/offsets/index.mjs"],"sourcesContent":["import { calcInset } from './inset.mjs';\r\nimport { ScrollOffset } from './presets.mjs';\r\nimport { resolveOffset } from './offset.mjs';\r\nimport { interpolate } from '../../../../utils/interpolate.mjs';\r\nimport { defaultOffset } from '../../../../utils/offsets/default.mjs';\r\n\r\nconst point = { x: 0, y: 0 };\r\nfunction resolveOffsets(container, info, options) {\r\n    let { offset: offsetDefinition = ScrollOffset.All } = options;\r\n    const { target = container, axis = \"y\" } = options;\r\n    const lengthLabel = axis === \"y\" ? \"height\" : \"width\";\r\n    const inset = target !== container ? calcInset(target, container) : point;\r\n    /**\r\n     * Measure the target and container. If they're the same thing then we\r\n     * use the container's scrollWidth/Height as the target, from there\r\n     * all other calculations can remain the same.\r\n     */\r\n    const targetSize = target === container\r\n        ? { width: container.scrollWidth, height: container.scrollHeight }\r\n        : { width: target.clientWidth, height: target.clientHeight };\r\n    const containerSize = {\r\n        width: container.clientWidth,\r\n        height: container.clientHeight,\r\n    };\r\n    /**\r\n     * Reset the length of the resolved offset array rather than creating a new one.\r\n     * TODO: More reusable data structures for targetSize/containerSize would also be good.\r\n     */\r\n    info[axis].offset.length = 0;\r\n    /**\r\n     * Populate the offset array by resolving the user's offset definition into\r\n     * a list of pixel scroll offets.\r\n     */\r\n    let hasChanged = !info[axis].interpolate;\r\n    const numOffsets = offsetDefinition.length;\r\n    for (let i = 0; i < numOffsets; i++) {\r\n        const offset = resolveOffset(offsetDefinition[i], containerSize[lengthLabel], targetSize[lengthLabel], inset[axis]);\r\n        if (!hasChanged && offset !== info[axis].interpolatorOffsets[i]) {\r\n            hasChanged = true;\r\n        }\r\n        info[axis].offset[i] = offset;\r\n    }\r\n    /**\r\n     * If the pixel scroll offsets have changed, create a new interpolator function\r\n     * to map scroll value into a progress.\r\n     */\r\n    if (hasChanged) {\r\n        info[axis].interpolate = interpolate(info[axis].offset, defaultOffset(offsetDefinition));\r\n        info[axis].interpolatorOffsets = [...info[axis].offset];\r\n    }\r\n    info[axis].progress = info[axis].interpolate(info[axis].current);\r\n}\r\n\r\nexport { resolveOffsets };\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,aAAa;AACvC,SAASC,YAAY,QAAQ,eAAe;AAC5C,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,WAAW,QAAQ,mCAAmC;AAC/D,SAASC,aAAa,QAAQ,uCAAuC;AAErE,IAAMC,KAAK,GAAG;EAAEC,CAAC,EAAE,CAAC;EAAEC,CAAC,EAAE;AAAE,CAAC;AAC5B,SAASC,cAAcA,CAACC,SAAS,EAAEC,IAAI,EAAEC,OAAO,EAAE;EAC9C,IAAAC,eAAA,GAAsDD,OAAO,CAAvDE,MAAM;IAAEC,gBAAgB,GAAAF,eAAA,cAAGX,YAAY,CAACc,GAAG,GAAAH,eAAA;EACjD,IAAAI,eAAA,GAA2CL,OAAO,CAA1CM,MAAM;IAANA,MAAM,GAAAD,eAAA,cAAGP,SAAS,GAAAO,eAAA;IAAAE,aAAA,GAAiBP,OAAO,CAAtBQ,IAAI;IAAJA,IAAI,GAAAD,aAAA,cAAG,GAAG,GAAAA,aAAA;EACtC,IAAME,WAAW,GAAGD,IAAI,KAAK,GAAG,GAAG,QAAQ,GAAG,OAAO;EACrD,IAAME,KAAK,GAAGJ,MAAM,KAAKR,SAAS,GAAGT,SAAS,CAACiB,MAAM,EAAER,SAAS,CAAC,GAAGJ,KAAK;EACzE;AACJ;AACA;AACA;AACA;EACI,IAAMiB,UAAU,GAAGL,MAAM,KAAKR,SAAS,GACjC;IAAEc,KAAK,EAAEd,SAAS,CAACe,WAAW;IAAEC,MAAM,EAAEhB,SAAS,CAACiB;EAAa,CAAC,GAChE;IAAEH,KAAK,EAAEN,MAAM,CAACU,WAAW;IAAEF,MAAM,EAAER,MAAM,CAACW;EAAa,CAAC;EAChE,IAAMC,aAAa,GAAG;IAClBN,KAAK,EAAEd,SAAS,CAACkB,WAAW;IAC5BF,MAAM,EAAEhB,SAAS,CAACmB;EACtB,CAAC;EACD;AACJ;AACA;AACA;EACIlB,IAAI,CAACS,IAAI,CAAC,CAACN,MAAM,CAACiB,MAAM,GAAG,CAAC;EAC5B;AACJ;AACA;AACA;EACI,IAAIC,UAAU,GAAG,CAACrB,IAAI,CAACS,IAAI,CAAC,CAAChB,WAAW;EACxC,IAAM6B,UAAU,GAAGlB,gBAAgB,CAACgB,MAAM;EAC1C,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,UAAU,EAAEC,CAAC,EAAE,EAAE;IACjC,IAAMpB,MAAM,GAAGX,aAAa,CAACY,gBAAgB,CAACmB,CAAC,CAAC,EAAEJ,aAAa,CAACT,WAAW,CAAC,EAAEE,UAAU,CAACF,WAAW,CAAC,EAAEC,KAAK,CAACF,IAAI,CAAC,CAAC;IACnH,IAAI,CAACY,UAAU,IAAIlB,MAAM,KAAKH,IAAI,CAACS,IAAI,CAAC,CAACe,mBAAmB,CAACD,CAAC,CAAC,EAAE;MAC7DF,UAAU,GAAG,IAAI;IACrB;IACArB,IAAI,CAACS,IAAI,CAAC,CAACN,MAAM,CAACoB,CAAC,CAAC,GAAGpB,MAAM;EACjC;EACA;AACJ;AACA;AACA;EACI,IAAIkB,UAAU,EAAE;IACZrB,IAAI,CAACS,IAAI,CAAC,CAAChB,WAAW,GAAGA,WAAW,CAACO,IAAI,CAACS,IAAI,CAAC,CAACN,MAAM,EAAET,aAAa,CAACU,gBAAgB,CAAC,CAAC;IACxFJ,IAAI,CAACS,IAAI,CAAC,CAACe,mBAAmB,GAAAC,kBAAA,CAAOzB,IAAI,CAACS,IAAI,CAAC,CAACN,MAAM,CAAC;EAC3D;EACAH,IAAI,CAACS,IAAI,CAAC,CAACiB,QAAQ,GAAG1B,IAAI,CAACS,IAAI,CAAC,CAAChB,WAAW,CAACO,IAAI,CAACS,IAAI,CAAC,CAACkB,OAAO,CAAC;AACpE;AAEA,SAAS7B,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}