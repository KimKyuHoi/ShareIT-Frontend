{"ast":null,"code":"import { keyframes } from '../../generators/keyframes.mjs';\nimport { spring } from '../../generators/spring/index.mjs';\nimport { inertia } from '../../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../../utils/interpolate.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorDuration } from '../../generators/utils/calc-duration.mjs';\nconst types = {\n  decay: inertia,\n  inertia,\n  tween: keyframes,\n  keyframes: keyframes,\n  spring\n};\n/**\r\n * Animate a single value on the main thread.\r\n *\r\n * This function is written, where functionality overlaps,\r\n * to be largely spec-compliant with WAAPI to allow fungibility\r\n * between the two.\r\n */\nfunction animateValue({\n  autoplay = true,\n  delay = 0,\n  driver = frameloopDriver,\n  keyframes: keyframes$1,\n  type = \"keyframes\",\n  repeat = 0,\n  repeatDelay = 0,\n  repeatType = \"loop\",\n  onPlay,\n  onStop,\n  onComplete,\n  onUpdate,\n  ...options\n}) {\n  let speed = 1;\n  let hasStopped = false;\n  let resolveFinishedPromise;\n  let currentFinishedPromise;\n  /**\r\n   * Resolve the current Promise every time we enter the\r\n   * finished state. This is WAAPI-compatible behaviour.\r\n   */\n  const updateFinishedPromise = () => {\n    currentFinishedPromise = new Promise(resolve => {\n      resolveFinishedPromise = resolve;\n    });\n  };\n  // Create the first finished promise\n  updateFinishedPromise();\n  let animationDriver;\n  const generatorFactory = types[type] || keyframes;\n  /**\r\n   * If this isn't the keyframes generator and we've been provided\r\n   * strings as keyframes, we need to interpolate these.\r\n   * TODO: Support velocity for units and complex value types/\r\n   */\n  let mapNumbersToKeyframes;\n  if (generatorFactory !== keyframes && typeof keyframes$1[0] !== \"number\") {\n    mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n      clamp: false\n    });\n    keyframes$1 = [0, 100];\n  }\n  const generator = generatorFactory({\n    ...options,\n    keyframes: keyframes$1\n  });\n  let mirroredGenerator;\n  if (repeatType === \"mirror\") {\n    mirroredGenerator = generatorFactory({\n      ...options,\n      keyframes: [...keyframes$1].reverse(),\n      velocity: -(options.velocity || 0)\n    });\n  }\n  let playState = \"idle\";\n  let holdTime = null;\n  let startTime = null;\n  let cancelTime = null;\n  /**\r\n   * If duration is undefined and we have repeat options,\r\n   * we need to calculate a duration from the generator.\r\n   *\r\n   * We set it to the generator itself to cache the duration.\r\n   * Any timeline resolver will need to have already precalculated\r\n   * the duration by this step.\r\n   */\n  if (generator.calculatedDuration === null && repeat) {\n    generator.calculatedDuration = calcGeneratorDuration(generator);\n  }\n  const {\n    calculatedDuration\n  } = generator;\n  let resolvedDuration = Infinity;\n  let totalDuration = Infinity;\n  if (calculatedDuration !== null) {\n    resolvedDuration = calculatedDuration + repeatDelay;\n    totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n  }\n  let currentTime = 0;\n  const tick = timestamp => {\n    if (startTime === null) return;\n    /**\r\n     * requestAnimationFrame timestamps can come through as lower than\r\n     * the startTime as set by performance.now(). Here we prevent this,\r\n     * though in the future it could be possible to make setting startTime\r\n     * a pending operation that gets resolved here.\r\n     */\n    if (speed > 0) startTime = Math.min(startTime, timestamp);\n    if (speed < 0) startTime = Math.min(timestamp - totalDuration / speed, startTime);\n    if (holdTime !== null) {\n      currentTime = holdTime;\n    } else {\n      // Rounding the time because floating point arithmetic is not always accurate, e.g. 3000.367 - 1000.367 =\n      // 2000.0000000000002. This is a problem when we are comparing the currentTime with the duration, for\n      // example.\n      currentTime = Math.round(timestamp - startTime) * speed;\n    }\n    // Rebase on delay\n    const timeWithoutDelay = currentTime - delay * (speed >= 0 ? 1 : -1);\n    const isInDelayPhase = speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;\n    currentTime = Math.max(timeWithoutDelay, 0);\n    /**\r\n     * If this animation has finished, set the current time\r\n     * to the total duration.\r\n     */\n    if (playState === \"finished\" && holdTime === null) {\n      currentTime = totalDuration;\n    }\n    let elapsed = currentTime;\n    let frameGenerator = generator;\n    if (repeat) {\n      /**\r\n       * Get the current progress (0-1) of the animation. If t is >\r\n       * than duration we'll get values like 2.5 (midway through the\r\n       * third iteration)\r\n       */\n      const progress = currentTime / resolvedDuration;\n      /**\r\n       * Get the current iteration (0 indexed). For instance the floor of\r\n       * 2.5 is 2.\r\n       */\n      let currentIteration = Math.floor(progress);\n      /**\r\n       * Get the current progress of the iteration by taking the remainder\r\n       * so 2.5 is 0.5 through iteration 2\r\n       */\n      let iterationProgress = progress % 1.0;\n      /**\r\n       * If iteration progress is 1 we count that as the end\r\n       * of the previous iteration.\r\n       */\n      if (!iterationProgress && progress >= 1) {\n        iterationProgress = 1;\n      }\n      iterationProgress === 1 && currentIteration--;\n      currentIteration = Math.min(currentIteration, repeat + 1);\n      /**\r\n       * Reverse progress if we're not running in \"normal\" direction\r\n       */\n      const iterationIsOdd = Boolean(currentIteration % 2);\n      if (iterationIsOdd) {\n        if (repeatType === \"reverse\") {\n          iterationProgress = 1 - iterationProgress;\n          if (repeatDelay) {\n            iterationProgress -= repeatDelay / resolvedDuration;\n          }\n        } else if (repeatType === \"mirror\") {\n          frameGenerator = mirroredGenerator;\n        }\n      }\n      let p = clamp(0, 1, iterationProgress);\n      if (currentTime > totalDuration) {\n        p = repeatType === \"reverse\" && iterationIsOdd ? 1 : 0;\n      }\n      elapsed = p * resolvedDuration;\n    }\n    /**\r\n     * If we're in negative time, set state as the initial keyframe.\r\n     * This prevents delay: x, duration: 0 animations from finishing\r\n     * instantly.\r\n     */\n    const state = isInDelayPhase ? {\n      done: false,\n      value: keyframes$1[0]\n    } : frameGenerator.next(elapsed);\n    if (mapNumbersToKeyframes) {\n      state.value = mapNumbersToKeyframes(state.value);\n    }\n    let {\n      done\n    } = state;\n    if (!isInDelayPhase && calculatedDuration !== null) {\n      done = speed >= 0 ? currentTime >= totalDuration : currentTime <= 0;\n    }\n    const isAnimationFinished = holdTime === null && (playState === \"finished\" || playState === \"running\" && done);\n    if (onUpdate) {\n      onUpdate(state.value);\n    }\n    if (isAnimationFinished) {\n      finish();\n    }\n    return state;\n  };\n  const stopAnimationDriver = () => {\n    animationDriver && animationDriver.stop();\n    animationDriver = undefined;\n  };\n  const cancel = () => {\n    playState = \"idle\";\n    stopAnimationDriver();\n    resolveFinishedPromise();\n    updateFinishedPromise();\n    startTime = cancelTime = null;\n  };\n  const finish = () => {\n    playState = \"finished\";\n    onComplete && onComplete();\n    stopAnimationDriver();\n    resolveFinishedPromise();\n  };\n  const play = () => {\n    if (hasStopped) return;\n    if (!animationDriver) animationDriver = driver(tick);\n    const now = animationDriver.now();\n    onPlay && onPlay();\n    if (holdTime !== null) {\n      startTime = now - holdTime;\n    } else if (!startTime || playState === \"finished\") {\n      startTime = now;\n    }\n    if (playState === \"finished\") {\n      updateFinishedPromise();\n    }\n    cancelTime = startTime;\n    holdTime = null;\n    /**\r\n     * Set playState to running only after we've used it in\r\n     * the previous logic.\r\n     */\n    playState = \"running\";\n    animationDriver.start();\n  };\n  if (autoplay) {\n    play();\n  }\n  const controls = {\n    then(resolve, reject) {\n      return currentFinishedPromise.then(resolve, reject);\n    },\n    get time() {\n      return millisecondsToSeconds(currentTime);\n    },\n    set time(newTime) {\n      newTime = secondsToMilliseconds(newTime);\n      currentTime = newTime;\n      if (holdTime !== null || !animationDriver || speed === 0) {\n        holdTime = newTime;\n      } else {\n        startTime = animationDriver.now() - newTime / speed;\n      }\n    },\n    get duration() {\n      const duration = generator.calculatedDuration === null ? calcGeneratorDuration(generator) : generator.calculatedDuration;\n      return millisecondsToSeconds(duration);\n    },\n    get speed() {\n      return speed;\n    },\n    set speed(newSpeed) {\n      if (newSpeed === speed || !animationDriver) return;\n      speed = newSpeed;\n      controls.time = millisecondsToSeconds(currentTime);\n    },\n    get state() {\n      return playState;\n    },\n    play,\n    pause: () => {\n      playState = \"paused\";\n      holdTime = currentTime;\n    },\n    stop: () => {\n      hasStopped = true;\n      if (playState === \"idle\") return;\n      playState = \"idle\";\n      onStop && onStop();\n      cancel();\n    },\n    cancel: () => {\n      if (cancelTime !== null) tick(cancelTime);\n      cancel();\n    },\n    complete: () => {\n      playState = \"finished\";\n    },\n    sample: elapsed => {\n      startTime = 0;\n      return tick(elapsed);\n    }\n  };\n  return controls;\n}\nexport { animateValue };","map":{"version":3,"names":["keyframes","spring","inertia","frameloopDriver","interpolate","clamp","millisecondsToSeconds","secondsToMilliseconds","calcGeneratorDuration","types","decay","tween","animateValue","autoplay","delay","driver","keyframes$1","type","repeat","repeatDelay","repeatType","onPlay","onStop","onComplete","onUpdate","options","speed","hasStopped","resolveFinishedPromise","currentFinishedPromise","updateFinishedPromise","Promise","resolve","animationDriver","generatorFactory","mapNumbersToKeyframes","generator","mirroredGenerator","reverse","velocity","playState","holdTime","startTime","cancelTime","calculatedDuration","resolvedDuration","Infinity","totalDuration","currentTime","tick","timestamp","Math","min","round","timeWithoutDelay","isInDelayPhase","max","elapsed","frameGenerator","progress","currentIteration","floor","iterationProgress","iterationIsOdd","Boolean","p","state","done","value","next","isAnimationFinished","finish","stopAnimationDriver","stop","undefined","cancel","play","now","start","controls","then","reject","time","newTime","duration","newSpeed","pause","complete","sample"],"sources":["C:/Users/k546k/Desktop/대외용 및 혼자 공부한 자료/멋쟁이사자/ShareIT-Frontend/shareit_frontend/node_modules/framer-motion/dist/es/animation/animators/js/index.mjs"],"sourcesContent":["import { keyframes } from '../../generators/keyframes.mjs';\r\nimport { spring } from '../../generators/spring/index.mjs';\r\nimport { inertia } from '../../generators/inertia.mjs';\r\nimport { frameloopDriver } from './driver-frameloop.mjs';\r\nimport { interpolate } from '../../../utils/interpolate.mjs';\r\nimport { clamp } from '../../../utils/clamp.mjs';\r\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\r\nimport { calcGeneratorDuration } from '../../generators/utils/calc-duration.mjs';\r\n\r\nconst types = {\r\n    decay: inertia,\r\n    inertia,\r\n    tween: keyframes,\r\n    keyframes: keyframes,\r\n    spring,\r\n};\r\n/**\r\n * Animate a single value on the main thread.\r\n *\r\n * This function is written, where functionality overlaps,\r\n * to be largely spec-compliant with WAAPI to allow fungibility\r\n * between the two.\r\n */\r\nfunction animateValue({ autoplay = true, delay = 0, driver = frameloopDriver, keyframes: keyframes$1, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", onPlay, onStop, onComplete, onUpdate, ...options }) {\r\n    let speed = 1;\r\n    let hasStopped = false;\r\n    let resolveFinishedPromise;\r\n    let currentFinishedPromise;\r\n    /**\r\n     * Resolve the current Promise every time we enter the\r\n     * finished state. This is WAAPI-compatible behaviour.\r\n     */\r\n    const updateFinishedPromise = () => {\r\n        currentFinishedPromise = new Promise((resolve) => {\r\n            resolveFinishedPromise = resolve;\r\n        });\r\n    };\r\n    // Create the first finished promise\r\n    updateFinishedPromise();\r\n    let animationDriver;\r\n    const generatorFactory = types[type] || keyframes;\r\n    /**\r\n     * If this isn't the keyframes generator and we've been provided\r\n     * strings as keyframes, we need to interpolate these.\r\n     * TODO: Support velocity for units and complex value types/\r\n     */\r\n    let mapNumbersToKeyframes;\r\n    if (generatorFactory !== keyframes &&\r\n        typeof keyframes$1[0] !== \"number\") {\r\n        mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\r\n            clamp: false,\r\n        });\r\n        keyframes$1 = [0, 100];\r\n    }\r\n    const generator = generatorFactory({ ...options, keyframes: keyframes$1 });\r\n    let mirroredGenerator;\r\n    if (repeatType === \"mirror\") {\r\n        mirroredGenerator = generatorFactory({\r\n            ...options,\r\n            keyframes: [...keyframes$1].reverse(),\r\n            velocity: -(options.velocity || 0),\r\n        });\r\n    }\r\n    let playState = \"idle\";\r\n    let holdTime = null;\r\n    let startTime = null;\r\n    let cancelTime = null;\r\n    /**\r\n     * If duration is undefined and we have repeat options,\r\n     * we need to calculate a duration from the generator.\r\n     *\r\n     * We set it to the generator itself to cache the duration.\r\n     * Any timeline resolver will need to have already precalculated\r\n     * the duration by this step.\r\n     */\r\n    if (generator.calculatedDuration === null && repeat) {\r\n        generator.calculatedDuration = calcGeneratorDuration(generator);\r\n    }\r\n    const { calculatedDuration } = generator;\r\n    let resolvedDuration = Infinity;\r\n    let totalDuration = Infinity;\r\n    if (calculatedDuration !== null) {\r\n        resolvedDuration = calculatedDuration + repeatDelay;\r\n        totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\r\n    }\r\n    let currentTime = 0;\r\n    const tick = (timestamp) => {\r\n        if (startTime === null)\r\n            return;\r\n        /**\r\n         * requestAnimationFrame timestamps can come through as lower than\r\n         * the startTime as set by performance.now(). Here we prevent this,\r\n         * though in the future it could be possible to make setting startTime\r\n         * a pending operation that gets resolved here.\r\n         */\r\n        if (speed > 0)\r\n            startTime = Math.min(startTime, timestamp);\r\n        if (speed < 0)\r\n            startTime = Math.min(timestamp - totalDuration / speed, startTime);\r\n        if (holdTime !== null) {\r\n            currentTime = holdTime;\r\n        }\r\n        else {\r\n            // Rounding the time because floating point arithmetic is not always accurate, e.g. 3000.367 - 1000.367 =\r\n            // 2000.0000000000002. This is a problem when we are comparing the currentTime with the duration, for\r\n            // example.\r\n            currentTime = Math.round(timestamp - startTime) * speed;\r\n        }\r\n        // Rebase on delay\r\n        const timeWithoutDelay = currentTime - delay * (speed >= 0 ? 1 : -1);\r\n        const isInDelayPhase = speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;\r\n        currentTime = Math.max(timeWithoutDelay, 0);\r\n        /**\r\n         * If this animation has finished, set the current time\r\n         * to the total duration.\r\n         */\r\n        if (playState === \"finished\" && holdTime === null) {\r\n            currentTime = totalDuration;\r\n        }\r\n        let elapsed = currentTime;\r\n        let frameGenerator = generator;\r\n        if (repeat) {\r\n            /**\r\n             * Get the current progress (0-1) of the animation. If t is >\r\n             * than duration we'll get values like 2.5 (midway through the\r\n             * third iteration)\r\n             */\r\n            const progress = currentTime / resolvedDuration;\r\n            /**\r\n             * Get the current iteration (0 indexed). For instance the floor of\r\n             * 2.5 is 2.\r\n             */\r\n            let currentIteration = Math.floor(progress);\r\n            /**\r\n             * Get the current progress of the iteration by taking the remainder\r\n             * so 2.5 is 0.5 through iteration 2\r\n             */\r\n            let iterationProgress = progress % 1.0;\r\n            /**\r\n             * If iteration progress is 1 we count that as the end\r\n             * of the previous iteration.\r\n             */\r\n            if (!iterationProgress && progress >= 1) {\r\n                iterationProgress = 1;\r\n            }\r\n            iterationProgress === 1 && currentIteration--;\r\n            currentIteration = Math.min(currentIteration, repeat + 1);\r\n            /**\r\n             * Reverse progress if we're not running in \"normal\" direction\r\n             */\r\n            const iterationIsOdd = Boolean(currentIteration % 2);\r\n            if (iterationIsOdd) {\r\n                if (repeatType === \"reverse\") {\r\n                    iterationProgress = 1 - iterationProgress;\r\n                    if (repeatDelay) {\r\n                        iterationProgress -= repeatDelay / resolvedDuration;\r\n                    }\r\n                }\r\n                else if (repeatType === \"mirror\") {\r\n                    frameGenerator = mirroredGenerator;\r\n                }\r\n            }\r\n            let p = clamp(0, 1, iterationProgress);\r\n            if (currentTime > totalDuration) {\r\n                p = repeatType === \"reverse\" && iterationIsOdd ? 1 : 0;\r\n            }\r\n            elapsed = p * resolvedDuration;\r\n        }\r\n        /**\r\n         * If we're in negative time, set state as the initial keyframe.\r\n         * This prevents delay: x, duration: 0 animations from finishing\r\n         * instantly.\r\n         */\r\n        const state = isInDelayPhase\r\n            ? { done: false, value: keyframes$1[0] }\r\n            : frameGenerator.next(elapsed);\r\n        if (mapNumbersToKeyframes) {\r\n            state.value = mapNumbersToKeyframes(state.value);\r\n        }\r\n        let { done } = state;\r\n        if (!isInDelayPhase && calculatedDuration !== null) {\r\n            done = speed >= 0 ? currentTime >= totalDuration : currentTime <= 0;\r\n        }\r\n        const isAnimationFinished = holdTime === null &&\r\n            (playState === \"finished\" || (playState === \"running\" && done));\r\n        if (onUpdate) {\r\n            onUpdate(state.value);\r\n        }\r\n        if (isAnimationFinished) {\r\n            finish();\r\n        }\r\n        return state;\r\n    };\r\n    const stopAnimationDriver = () => {\r\n        animationDriver && animationDriver.stop();\r\n        animationDriver = undefined;\r\n    };\r\n    const cancel = () => {\r\n        playState = \"idle\";\r\n        stopAnimationDriver();\r\n        resolveFinishedPromise();\r\n        updateFinishedPromise();\r\n        startTime = cancelTime = null;\r\n    };\r\n    const finish = () => {\r\n        playState = \"finished\";\r\n        onComplete && onComplete();\r\n        stopAnimationDriver();\r\n        resolveFinishedPromise();\r\n    };\r\n    const play = () => {\r\n        if (hasStopped)\r\n            return;\r\n        if (!animationDriver)\r\n            animationDriver = driver(tick);\r\n        const now = animationDriver.now();\r\n        onPlay && onPlay();\r\n        if (holdTime !== null) {\r\n            startTime = now - holdTime;\r\n        }\r\n        else if (!startTime || playState === \"finished\") {\r\n            startTime = now;\r\n        }\r\n        if (playState === \"finished\") {\r\n            updateFinishedPromise();\r\n        }\r\n        cancelTime = startTime;\r\n        holdTime = null;\r\n        /**\r\n         * Set playState to running only after we've used it in\r\n         * the previous logic.\r\n         */\r\n        playState = \"running\";\r\n        animationDriver.start();\r\n    };\r\n    if (autoplay) {\r\n        play();\r\n    }\r\n    const controls = {\r\n        then(resolve, reject) {\r\n            return currentFinishedPromise.then(resolve, reject);\r\n        },\r\n        get time() {\r\n            return millisecondsToSeconds(currentTime);\r\n        },\r\n        set time(newTime) {\r\n            newTime = secondsToMilliseconds(newTime);\r\n            currentTime = newTime;\r\n            if (holdTime !== null || !animationDriver || speed === 0) {\r\n                holdTime = newTime;\r\n            }\r\n            else {\r\n                startTime = animationDriver.now() - newTime / speed;\r\n            }\r\n        },\r\n        get duration() {\r\n            const duration = generator.calculatedDuration === null\r\n                ? calcGeneratorDuration(generator)\r\n                : generator.calculatedDuration;\r\n            return millisecondsToSeconds(duration);\r\n        },\r\n        get speed() {\r\n            return speed;\r\n        },\r\n        set speed(newSpeed) {\r\n            if (newSpeed === speed || !animationDriver)\r\n                return;\r\n            speed = newSpeed;\r\n            controls.time = millisecondsToSeconds(currentTime);\r\n        },\r\n        get state() {\r\n            return playState;\r\n        },\r\n        play,\r\n        pause: () => {\r\n            playState = \"paused\";\r\n            holdTime = currentTime;\r\n        },\r\n        stop: () => {\r\n            hasStopped = true;\r\n            if (playState === \"idle\")\r\n                return;\r\n            playState = \"idle\";\r\n            onStop && onStop();\r\n            cancel();\r\n        },\r\n        cancel: () => {\r\n            if (cancelTime !== null)\r\n                tick(cancelTime);\r\n            cancel();\r\n        },\r\n        complete: () => {\r\n            playState = \"finished\";\r\n        },\r\n        sample: (elapsed) => {\r\n            startTime = 0;\r\n            return tick(elapsed);\r\n        },\r\n    };\r\n    return controls;\r\n}\r\n\r\nexport { animateValue };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}