{"ast":null,"code":"import { useTransform } from './use-transform.mjs';\nimport { invariant, warning } from '../utils/errors.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useContext } from 'react';\n\n// Keep things reasonable and avoid scale: Infinity. In practise we might need\n// to add another value, opacity, that could interpolate scaleX/Y [0,0.01] => [0,1]\n// to simply hide content at unreasonable scales.\nvar maxScale = 100000;\nvar invertScale = function invertScale(scale) {\n  return scale > 0.001 ? 1 / scale : maxScale;\n};\nvar hasWarned = false;\n/**\r\n * Returns a `MotionValue` each for `scaleX` and `scaleY` that update with the inverse\r\n * of their respective parent scales.\r\n *\r\n * This is useful for undoing the distortion of content when scaling a parent component.\r\n *\r\n * By default, `useInvertedScale` will automatically fetch `scaleX` and `scaleY` from the nearest parent.\r\n * By passing other `MotionValue`s in as `useInvertedScale({ scaleX, scaleY })`, it will invert the output\r\n * of those instead.\r\n *\r\n * ```jsx\r\n * const MyComponent = () => {\r\n *   const { scaleX, scaleY } = useInvertedScale()\r\n *   return <motion.div style={{ scaleX, scaleY }} />\r\n * }\r\n * ```\r\n *\r\n * @deprecated\r\n */\nfunction useInvertedScale(scale) {\n  var parentScaleX = useMotionValue(1);\n  var parentScaleY = useMotionValue(1);\n  var _useContext = useContext(MotionContext),\n    visualElement = _useContext.visualElement;\n  invariant(!!(scale || visualElement), \"If no scale values are provided, useInvertedScale must be used within a child of another motion component.\");\n  warning(hasWarned, \"useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.\");\n  hasWarned = true;\n  if (scale) {\n    parentScaleX = scale.scaleX || parentScaleX;\n    parentScaleY = scale.scaleY || parentScaleY;\n  } else if (visualElement) {\n    parentScaleX = visualElement.getValue(\"scaleX\", 1);\n    parentScaleY = visualElement.getValue(\"scaleY\", 1);\n  }\n  var scaleX = useTransform(parentScaleX, invertScale);\n  var scaleY = useTransform(parentScaleY, invertScale);\n  return {\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n}\nexport { invertScale, useInvertedScale };","map":{"version":3,"names":["useTransform","invariant","warning","useMotionValue","MotionContext","useContext","maxScale","invertScale","scale","hasWarned","useInvertedScale","parentScaleX","parentScaleY","_useContext","visualElement","scaleX","scaleY","getValue"],"sources":["C:/Users/k546k/Desktop/멋쟁이사자/쉐어잇/shareit_frontend/node_modules/framer-motion/dist/es/value/use-inverted-scale.mjs"],"sourcesContent":["import { useTransform } from './use-transform.mjs';\r\nimport { invariant, warning } from '../utils/errors.mjs';\r\nimport { useMotionValue } from './use-motion-value.mjs';\r\nimport { MotionContext } from '../context/MotionContext/index.mjs';\r\nimport { useContext } from 'react';\r\n\r\n// Keep things reasonable and avoid scale: Infinity. In practise we might need\r\n// to add another value, opacity, that could interpolate scaleX/Y [0,0.01] => [0,1]\r\n// to simply hide content at unreasonable scales.\r\nconst maxScale = 100000;\r\nconst invertScale = (scale) => scale > 0.001 ? 1 / scale : maxScale;\r\nlet hasWarned = false;\r\n/**\r\n * Returns a `MotionValue` each for `scaleX` and `scaleY` that update with the inverse\r\n * of their respective parent scales.\r\n *\r\n * This is useful for undoing the distortion of content when scaling a parent component.\r\n *\r\n * By default, `useInvertedScale` will automatically fetch `scaleX` and `scaleY` from the nearest parent.\r\n * By passing other `MotionValue`s in as `useInvertedScale({ scaleX, scaleY })`, it will invert the output\r\n * of those instead.\r\n *\r\n * ```jsx\r\n * const MyComponent = () => {\r\n *   const { scaleX, scaleY } = useInvertedScale()\r\n *   return <motion.div style={{ scaleX, scaleY }} />\r\n * }\r\n * ```\r\n *\r\n * @deprecated\r\n */\r\nfunction useInvertedScale(scale) {\r\n    let parentScaleX = useMotionValue(1);\r\n    let parentScaleY = useMotionValue(1);\r\n    const { visualElement } = useContext(MotionContext);\r\n    invariant(!!(scale || visualElement), \"If no scale values are provided, useInvertedScale must be used within a child of another motion component.\");\r\n    warning(hasWarned, \"useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.\");\r\n    hasWarned = true;\r\n    if (scale) {\r\n        parentScaleX = scale.scaleX || parentScaleX;\r\n        parentScaleY = scale.scaleY || parentScaleY;\r\n    }\r\n    else if (visualElement) {\r\n        parentScaleX = visualElement.getValue(\"scaleX\", 1);\r\n        parentScaleY = visualElement.getValue(\"scaleY\", 1);\r\n    }\r\n    const scaleX = useTransform(parentScaleX, invertScale);\r\n    const scaleY = useTransform(parentScaleY, invertScale);\r\n    return { scaleX, scaleY };\r\n}\r\n\r\nexport { invertScale, useInvertedScale };\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,qBAAqB;AAClD,SAASC,SAAS,EAAEC,OAAO,QAAQ,qBAAqB;AACxD,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,aAAa,QAAQ,oCAAoC;AAClE,SAASC,UAAU,QAAQ,OAAO;;AAElC;AACA;AACA;AACA,IAAMC,QAAQ,GAAG,MAAM;AACvB,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAIC,KAAK;EAAA,OAAKA,KAAK,GAAG,KAAK,GAAG,CAAC,GAAGA,KAAK,GAAGF,QAAQ;AAAA;AACnE,IAAIG,SAAS,GAAG,KAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgBA,CAACF,KAAK,EAAE;EAC7B,IAAIG,YAAY,GAAGR,cAAc,CAAC,CAAC,CAAC;EACpC,IAAIS,YAAY,GAAGT,cAAc,CAAC,CAAC,CAAC;EACpC,IAAAU,WAAA,GAA0BR,UAAU,CAACD,aAAa,CAAC;IAA3CU,aAAa,GAAAD,WAAA,CAAbC,aAAa;EACrBb,SAAS,CAAC,CAAC,EAAEO,KAAK,IAAIM,aAAa,CAAC,EAAE,4GAA4G,CAAC;EACnJZ,OAAO,CAACO,SAAS,EAAE,yFAAyF,CAAC;EAC7GA,SAAS,GAAG,IAAI;EAChB,IAAID,KAAK,EAAE;IACPG,YAAY,GAAGH,KAAK,CAACO,MAAM,IAAIJ,YAAY;IAC3CC,YAAY,GAAGJ,KAAK,CAACQ,MAAM,IAAIJ,YAAY;EAC/C,CAAC,MACI,IAAIE,aAAa,EAAE;IACpBH,YAAY,GAAGG,aAAa,CAACG,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;IAClDL,YAAY,GAAGE,aAAa,CAACG,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;EACtD;EACA,IAAMF,MAAM,GAAGf,YAAY,CAACW,YAAY,EAAEJ,WAAW,CAAC;EACtD,IAAMS,MAAM,GAAGhB,YAAY,CAACY,YAAY,EAAEL,WAAW,CAAC;EACtD,OAAO;IAAEQ,MAAM,EAANA,MAAM;IAAEC,MAAM,EAANA;EAAO,CAAC;AAC7B;AAEA,SAAST,WAAW,EAAEG,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}