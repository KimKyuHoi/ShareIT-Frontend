{"ast":null,"code":"function buildProjectionTransform(delta, treeScale, latestTransform) {\n  var transform = \"\";\n  /**\r\n   * The translations we use to calculate are always relative to the viewport coordinate space.\r\n   * But when we apply scales, we also scale the coordinate space of an element and its children.\r\n   * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\r\n   * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\r\n   */\n  var xTranslate = delta.x.translate / treeScale.x;\n  var yTranslate = delta.y.translate / treeScale.y;\n  if (xTranslate || yTranslate) {\n    transform = \"translate3d(\".concat(xTranslate, \"px, \").concat(yTranslate, \"px, 0) \");\n  }\n  /**\r\n   * Apply scale correction for the tree transform.\r\n   * This will apply scale to the screen-orientated axes.\r\n   */\n  if (treeScale.x !== 1 || treeScale.y !== 1) {\n    transform += \"scale(\".concat(1 / treeScale.x, \", \").concat(1 / treeScale.y, \") \");\n  }\n  if (latestTransform) {\n    var rotate = latestTransform.rotate,\n      rotateX = latestTransform.rotateX,\n      rotateY = latestTransform.rotateY;\n    if (rotate) transform += \"rotate(\".concat(rotate, \"deg) \");\n    if (rotateX) transform += \"rotateX(\".concat(rotateX, \"deg) \");\n    if (rotateY) transform += \"rotateY(\".concat(rotateY, \"deg) \");\n  }\n  /**\r\n   * Apply scale to match the size of the element to the size we want it.\r\n   * This will apply scale to the element-orientated axes.\r\n   */\n  var elementScaleX = delta.x.scale * treeScale.x;\n  var elementScaleY = delta.y.scale * treeScale.y;\n  if (elementScaleX !== 1 || elementScaleY !== 1) {\n    transform += \"scale(\".concat(elementScaleX, \", \").concat(elementScaleY, \")\");\n  }\n  return transform || \"none\";\n}\nexport { buildProjectionTransform };","map":{"version":3,"names":["buildProjectionTransform","delta","treeScale","latestTransform","transform","xTranslate","x","translate","yTranslate","y","concat","rotate","rotateX","rotateY","elementScaleX","scale","elementScaleY"],"sources":["C:/Users/k546k/Desktop/멋쟁이사자/쉐어잇/shareit_frontend/node_modules/framer-motion/dist/es/projection/styles/transform.mjs"],"sourcesContent":["function buildProjectionTransform(delta, treeScale, latestTransform) {\r\n    let transform = \"\";\r\n    /**\r\n     * The translations we use to calculate are always relative to the viewport coordinate space.\r\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\r\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\r\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\r\n     */\r\n    const xTranslate = delta.x.translate / treeScale.x;\r\n    const yTranslate = delta.y.translate / treeScale.y;\r\n    if (xTranslate || yTranslate) {\r\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\r\n    }\r\n    /**\r\n     * Apply scale correction for the tree transform.\r\n     * This will apply scale to the screen-orientated axes.\r\n     */\r\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\r\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\r\n    }\r\n    if (latestTransform) {\r\n        const { rotate, rotateX, rotateY } = latestTransform;\r\n        if (rotate)\r\n            transform += `rotate(${rotate}deg) `;\r\n        if (rotateX)\r\n            transform += `rotateX(${rotateX}deg) `;\r\n        if (rotateY)\r\n            transform += `rotateY(${rotateY}deg) `;\r\n    }\r\n    /**\r\n     * Apply scale to match the size of the element to the size we want it.\r\n     * This will apply scale to the element-orientated axes.\r\n     */\r\n    const elementScaleX = delta.x.scale * treeScale.x;\r\n    const elementScaleY = delta.y.scale * treeScale.y;\r\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\r\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\r\n    }\r\n    return transform || \"none\";\r\n}\r\n\r\nexport { buildProjectionTransform };\r\n"],"mappings":"AAAA,SAASA,wBAAwBA,CAACC,KAAK,EAAEC,SAAS,EAAEC,eAAe,EAAE;EACjE,IAAIC,SAAS,GAAG,EAAE;EAClB;AACJ;AACA;AACA;AACA;AACA;EACI,IAAMC,UAAU,GAAGJ,KAAK,CAACK,CAAC,CAACC,SAAS,GAAGL,SAAS,CAACI,CAAC;EAClD,IAAME,UAAU,GAAGP,KAAK,CAACQ,CAAC,CAACF,SAAS,GAAGL,SAAS,CAACO,CAAC;EAClD,IAAIJ,UAAU,IAAIG,UAAU,EAAE;IAC1BJ,SAAS,kBAAAM,MAAA,CAAkBL,UAAU,UAAAK,MAAA,CAAOF,UAAU,YAAS;EACnE;EACA;AACJ;AACA;AACA;EACI,IAAIN,SAAS,CAACI,CAAC,KAAK,CAAC,IAAIJ,SAAS,CAACO,CAAC,KAAK,CAAC,EAAE;IACxCL,SAAS,aAAAM,MAAA,CAAa,CAAC,GAAGR,SAAS,CAACI,CAAC,QAAAI,MAAA,CAAK,CAAC,GAAGR,SAAS,CAACO,CAAC,OAAI;EACjE;EACA,IAAIN,eAAe,EAAE;IACjB,IAAQQ,MAAM,GAAuBR,eAAe,CAA5CQ,MAAM;MAAEC,OAAO,GAAcT,eAAe,CAApCS,OAAO;MAAEC,OAAO,GAAKV,eAAe,CAA3BU,OAAO;IAChC,IAAIF,MAAM,EACNP,SAAS,cAAAM,MAAA,CAAcC,MAAM,UAAO;IACxC,IAAIC,OAAO,EACPR,SAAS,eAAAM,MAAA,CAAeE,OAAO,UAAO;IAC1C,IAAIC,OAAO,EACPT,SAAS,eAAAM,MAAA,CAAeG,OAAO,UAAO;EAC9C;EACA;AACJ;AACA;AACA;EACI,IAAMC,aAAa,GAAGb,KAAK,CAACK,CAAC,CAACS,KAAK,GAAGb,SAAS,CAACI,CAAC;EACjD,IAAMU,aAAa,GAAGf,KAAK,CAACQ,CAAC,CAACM,KAAK,GAAGb,SAAS,CAACO,CAAC;EACjD,IAAIK,aAAa,KAAK,CAAC,IAAIE,aAAa,KAAK,CAAC,EAAE;IAC5CZ,SAAS,aAAAM,MAAA,CAAaI,aAAa,QAAAJ,MAAA,CAAKM,aAAa,MAAG;EAC5D;EACA,OAAOZ,SAAS,IAAI,MAAM;AAC9B;AAEA,SAASJ,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}