{"ast":null,"code":"import _objectSpread from \"C:/Users/k546k/Desktop/\\uBA4B\\uC7C1\\uC774\\uC0AC\\uC790/\\uC250\\uC5B4\\uC787/shareit_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { useContext, useRef, useInsertionEffect } from 'react';\nimport { isMotionValue } from './utils/is-motion-value.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nimport { animateValue } from '../animation/animators/js/index.mjs';\nimport { millisecondsToSeconds } from '../utils/time-conversion.mjs';\nimport { frameData } from '../frameloop/frame.mjs';\n\n/**\r\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\r\n *\r\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\r\n * to another `MotionValue`.\r\n *\r\n * @remarks\r\n *\r\n * ```jsx\r\n * const x = useSpring(0, { stiffness: 300 })\r\n * const y = useSpring(x, { damping: 10 })\r\n * ```\r\n *\r\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\r\n * @param springConfig - Configuration options for the spring.\r\n * @returns `MotionValue`\r\n *\r\n * @public\r\n */\nfunction useSpring(source) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _useContext = useContext(MotionConfigContext),\n    isStatic = _useContext.isStatic;\n  var activeSpringAnimation = useRef(null);\n  var value = useMotionValue(isMotionValue(source) ? source.get() : source);\n  var stopAnimation = function stopAnimation() {\n    if (activeSpringAnimation.current) {\n      activeSpringAnimation.current.stop();\n    }\n  };\n  useInsertionEffect(function () {\n    return value.attach(function (v, set) {\n      /**\r\n       * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\r\n       * at that level, but this will work for now\r\n       */\n      if (isStatic) return set(v);\n      stopAnimation();\n      activeSpringAnimation.current = animateValue(_objectSpread(_objectSpread({\n        keyframes: [value.get(), v],\n        velocity: value.getVelocity(),\n        type: \"spring\",\n        restDelta: 0.001,\n        restSpeed: 0.01\n      }, config), {}, {\n        onUpdate: set\n      }));\n      /**\r\n       * If we're between frames, resync the animation to the frameloop.\r\n       */\n      if (!frameData.isProcessing) {\n        var delta = performance.now() - frameData.timestamp;\n        if (delta < 30) {\n          activeSpringAnimation.current.time = millisecondsToSeconds(delta);\n        }\n      }\n      return value.get();\n    }, stopAnimation);\n  }, [JSON.stringify(config)]);\n  useIsomorphicLayoutEffect(function () {\n    if (isMotionValue(source)) {\n      return source.on(\"change\", function (v) {\n        return value.set(parseFloat(v));\n      });\n    }\n  }, [value]);\n  return value;\n}\nexport { useSpring };","map":{"version":3,"names":["useContext","useRef","useInsertionEffect","isMotionValue","useMotionValue","MotionConfigContext","useIsomorphicLayoutEffect","animateValue","millisecondsToSeconds","frameData","useSpring","source","config","arguments","length","undefined","_useContext","isStatic","activeSpringAnimation","value","get","stopAnimation","current","stop","attach","v","set","_objectSpread","keyframes","velocity","getVelocity","type","restDelta","restSpeed","onUpdate","isProcessing","delta","performance","now","timestamp","time","JSON","stringify","on","parseFloat"],"sources":["C:/Users/k546k/Desktop/멋쟁이사자/쉐어잇/shareit_frontend/node_modules/framer-motion/dist/es/value/use-spring.mjs"],"sourcesContent":["import { useContext, useRef, useInsertionEffect } from 'react';\r\nimport { isMotionValue } from './utils/is-motion-value.mjs';\r\nimport { useMotionValue } from './use-motion-value.mjs';\r\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\r\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\r\nimport { animateValue } from '../animation/animators/js/index.mjs';\r\nimport { millisecondsToSeconds } from '../utils/time-conversion.mjs';\r\nimport { frameData } from '../frameloop/frame.mjs';\r\n\r\n/**\r\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\r\n *\r\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\r\n * to another `MotionValue`.\r\n *\r\n * @remarks\r\n *\r\n * ```jsx\r\n * const x = useSpring(0, { stiffness: 300 })\r\n * const y = useSpring(x, { damping: 10 })\r\n * ```\r\n *\r\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\r\n * @param springConfig - Configuration options for the spring.\r\n * @returns `MotionValue`\r\n *\r\n * @public\r\n */\r\nfunction useSpring(source, config = {}) {\r\n    const { isStatic } = useContext(MotionConfigContext);\r\n    const activeSpringAnimation = useRef(null);\r\n    const value = useMotionValue(isMotionValue(source) ? source.get() : source);\r\n    const stopAnimation = () => {\r\n        if (activeSpringAnimation.current) {\r\n            activeSpringAnimation.current.stop();\r\n        }\r\n    };\r\n    useInsertionEffect(() => {\r\n        return value.attach((v, set) => {\r\n            /**\r\n             * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\r\n             * at that level, but this will work for now\r\n             */\r\n            if (isStatic)\r\n                return set(v);\r\n            stopAnimation();\r\n            activeSpringAnimation.current = animateValue({\r\n                keyframes: [value.get(), v],\r\n                velocity: value.getVelocity(),\r\n                type: \"spring\",\r\n                restDelta: 0.001,\r\n                restSpeed: 0.01,\r\n                ...config,\r\n                onUpdate: set,\r\n            });\r\n            /**\r\n             * If we're between frames, resync the animation to the frameloop.\r\n             */\r\n            if (!frameData.isProcessing) {\r\n                const delta = performance.now() - frameData.timestamp;\r\n                if (delta < 30) {\r\n                    activeSpringAnimation.current.time =\r\n                        millisecondsToSeconds(delta);\r\n                }\r\n            }\r\n            return value.get();\r\n        }, stopAnimation);\r\n    }, [JSON.stringify(config)]);\r\n    useIsomorphicLayoutEffect(() => {\r\n        if (isMotionValue(source)) {\r\n            return source.on(\"change\", (v) => value.set(parseFloat(v)));\r\n        }\r\n    }, [value]);\r\n    return value;\r\n}\r\n\r\nexport { useSpring };\r\n"],"mappings":";AAAA,SAASA,UAAU,EAAEC,MAAM,EAAEC,kBAAkB,QAAQ,OAAO;AAC9D,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,mBAAmB,QAAQ,oCAAoC;AACxE,SAASC,yBAAyB,QAAQ,oCAAoC;AAC9E,SAASC,YAAY,QAAQ,qCAAqC;AAClE,SAASC,qBAAqB,QAAQ,8BAA8B;AACpE,SAASC,SAAS,QAAQ,wBAAwB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAACC,MAAM,EAAe;EAAA,IAAbC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAClC,IAAAG,WAAA,GAAqBhB,UAAU,CAACK,mBAAmB,CAAC;IAA5CY,QAAQ,GAAAD,WAAA,CAARC,QAAQ;EAChB,IAAMC,qBAAqB,GAAGjB,MAAM,CAAC,IAAI,CAAC;EAC1C,IAAMkB,KAAK,GAAGf,cAAc,CAACD,aAAa,CAACQ,MAAM,CAAC,GAAGA,MAAM,CAACS,GAAG,CAAC,CAAC,GAAGT,MAAM,CAAC;EAC3E,IAAMU,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;IACxB,IAAIH,qBAAqB,CAACI,OAAO,EAAE;MAC/BJ,qBAAqB,CAACI,OAAO,CAACC,IAAI,CAAC,CAAC;IACxC;EACJ,CAAC;EACDrB,kBAAkB,CAAC,YAAM;IACrB,OAAOiB,KAAK,CAACK,MAAM,CAAC,UAACC,CAAC,EAAEC,GAAG,EAAK;MAC5B;AACZ;AACA;AACA;MACY,IAAIT,QAAQ,EACR,OAAOS,GAAG,CAACD,CAAC,CAAC;MACjBJ,aAAa,CAAC,CAAC;MACfH,qBAAqB,CAACI,OAAO,GAAGf,YAAY,CAAAoB,aAAA,CAAAA,aAAA;QACxCC,SAAS,EAAE,CAACT,KAAK,CAACC,GAAG,CAAC,CAAC,EAAEK,CAAC,CAAC;QAC3BI,QAAQ,EAAEV,KAAK,CAACW,WAAW,CAAC,CAAC;QAC7BC,IAAI,EAAE,QAAQ;QACdC,SAAS,EAAE,KAAK;QAChBC,SAAS,EAAE;MAAI,GACZrB,MAAM;QACTsB,QAAQ,EAAER;MAAG,EAChB,CAAC;MACF;AACZ;AACA;MACY,IAAI,CAACjB,SAAS,CAAC0B,YAAY,EAAE;QACzB,IAAMC,KAAK,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC,GAAG7B,SAAS,CAAC8B,SAAS;QACrD,IAAIH,KAAK,GAAG,EAAE,EAAE;UACZlB,qBAAqB,CAACI,OAAO,CAACkB,IAAI,GAC9BhC,qBAAqB,CAAC4B,KAAK,CAAC;QACpC;MACJ;MACA,OAAOjB,KAAK,CAACC,GAAG,CAAC,CAAC;IACtB,CAAC,EAAEC,aAAa,CAAC;EACrB,CAAC,EAAE,CAACoB,IAAI,CAACC,SAAS,CAAC9B,MAAM,CAAC,CAAC,CAAC;EAC5BN,yBAAyB,CAAC,YAAM;IAC5B,IAAIH,aAAa,CAACQ,MAAM,CAAC,EAAE;MACvB,OAAOA,MAAM,CAACgC,EAAE,CAAC,QAAQ,EAAE,UAAClB,CAAC;QAAA,OAAKN,KAAK,CAACO,GAAG,CAACkB,UAAU,CAACnB,CAAC,CAAC,CAAC;MAAA,EAAC;IAC/D;EACJ,CAAC,EAAE,CAACN,KAAK,CAAC,CAAC;EACX,OAAOA,KAAK;AAChB;AAEA,SAAST,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}