{"ast":null,"code":"import _objectSpread from \"C:/Users/k546k/Desktop/\\uBA4B\\uC7C1\\uC774\\uC0AC\\uC790/\\uC250\\uC5B4\\uC787/shareit_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { number, alpha } from '../numbers/index.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\nvar clampRgbUnit = function clampRgbUnit(v) {\n  return clamp(0, 255, v);\n};\nvar rgbUnit = _objectSpread(_objectSpread({}, number), {}, {\n  transform: function transform(v) {\n    return Math.round(clampRgbUnit(v));\n  }\n});\nvar rgba = {\n  test: isColorString(\"rgb\", \"red\"),\n  parse: splitColor(\"red\", \"green\", \"blue\"),\n  transform: function transform(_ref) {\n    var red = _ref.red,\n      green = _ref.green,\n      blue = _ref.blue,\n      _ref$alpha = _ref.alpha,\n      alpha$1 = _ref$alpha === void 0 ? 1 : _ref$alpha;\n    return \"rgba(\" + rgbUnit.transform(red) + \", \" + rgbUnit.transform(green) + \", \" + rgbUnit.transform(blue) + \", \" + sanitize(alpha.transform(alpha$1)) + \")\";\n  }\n};\nexport { rgbUnit, rgba };","map":{"version":3,"names":["clamp","number","alpha","sanitize","isColorString","splitColor","clampRgbUnit","v","rgbUnit","_objectSpread","transform","Math","round","rgba","test","parse","_ref","red","green","blue","_ref$alpha","alpha$1"],"sources":["C:/Users/k546k/Desktop/멋쟁이사자/쉐어잇/shareit_frontend/node_modules/framer-motion/dist/es/value/types/color/rgba.mjs"],"sourcesContent":["import { clamp } from '../../../utils/clamp.mjs';\r\nimport { number, alpha } from '../numbers/index.mjs';\r\nimport { sanitize } from '../utils.mjs';\r\nimport { isColorString, splitColor } from './utils.mjs';\r\n\r\nconst clampRgbUnit = (v) => clamp(0, 255, v);\r\nconst rgbUnit = {\r\n    ...number,\r\n    transform: (v) => Math.round(clampRgbUnit(v)),\r\n};\r\nconst rgba = {\r\n    test: isColorString(\"rgb\", \"red\"),\r\n    parse: splitColor(\"red\", \"green\", \"blue\"),\r\n    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => \"rgba(\" +\r\n        rgbUnit.transform(red) +\r\n        \", \" +\r\n        rgbUnit.transform(green) +\r\n        \", \" +\r\n        rgbUnit.transform(blue) +\r\n        \", \" +\r\n        sanitize(alpha.transform(alpha$1)) +\r\n        \")\",\r\n};\r\n\r\nexport { rgbUnit, rgba };\r\n"],"mappings":";AAAA,SAASA,KAAK,QAAQ,0BAA0B;AAChD,SAASC,MAAM,EAAEC,KAAK,QAAQ,sBAAsB;AACpD,SAASC,QAAQ,QAAQ,cAAc;AACvC,SAASC,aAAa,EAAEC,UAAU,QAAQ,aAAa;AAEvD,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,CAAC;EAAA,OAAKP,KAAK,CAAC,CAAC,EAAE,GAAG,EAAEO,CAAC,CAAC;AAAA;AAC5C,IAAMC,OAAO,GAAAC,aAAA,CAAAA,aAAA,KACNR,MAAM;EACTS,SAAS,EAAE,SAAAA,UAACH,CAAC;IAAA,OAAKI,IAAI,CAACC,KAAK,CAACN,YAAY,CAACC,CAAC,CAAC,CAAC;EAAA;AAAA,EAChD;AACD,IAAMM,IAAI,GAAG;EACTC,IAAI,EAAEV,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC;EACjCW,KAAK,EAAEV,UAAU,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC;EACzCK,SAAS,EAAE,SAAAA,UAAAM,IAAA;IAAA,IAAGC,GAAG,GAAAD,IAAA,CAAHC,GAAG;MAAEC,KAAK,GAAAF,IAAA,CAALE,KAAK;MAAEC,IAAI,GAAAH,IAAA,CAAJG,IAAI;MAAAC,UAAA,GAAAJ,IAAA,CAAEd,KAAK;MAAEmB,OAAO,GAAAD,UAAA,cAAG,CAAC,GAAAA,UAAA;IAAA,OAAO,OAAO,GAC5DZ,OAAO,CAACE,SAAS,CAACO,GAAG,CAAC,GACtB,IAAI,GACJT,OAAO,CAACE,SAAS,CAACQ,KAAK,CAAC,GACxB,IAAI,GACJV,OAAO,CAACE,SAAS,CAACS,IAAI,CAAC,GACvB,IAAI,GACJhB,QAAQ,CAACD,KAAK,CAACQ,SAAS,CAACW,OAAO,CAAC,CAAC,GAClC,GAAG;EAAA;AACX,CAAC;AAED,SAASb,OAAO,EAAEK,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}