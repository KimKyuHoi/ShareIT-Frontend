{"ast":null,"code":"import * as React from 'react';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\nimport { invariant } from '../../utils/errors.mjs';\nconst getChildKey = child => child.key || \"\";\nfunction updateChildLookup(children, allChildren) {\n  children.forEach(child => {\n    const key = getChildKey(child);\n    allChildren.set(key, child);\n  });\n}\nfunction onlyElements(children) {\n  const filtered = [];\n  // We use forEach here instead of map as map mutates the component key by preprending `.$`\n  Children.forEach(children, child => {\n    if (isValidElement(child)) filtered.push(child);\n  });\n  return filtered;\n}\n/**\r\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\r\n *\r\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\r\n *\r\n * Any `motion` components that have an `exit` property defined will animate out when removed from\r\n * the tree.\r\n *\r\n * ```jsx\r\n * import { motion, AnimatePresence } from 'framer-motion'\r\n *\r\n * export const Items = ({ items }) => (\r\n *   <AnimatePresence>\r\n *     {items.map(item => (\r\n *       <motion.div\r\n *         key={item.id}\r\n *         initial={{ opacity: 0 }}\r\n *         animate={{ opacity: 1 }}\r\n *         exit={{ opacity: 0 }}\r\n *       />\r\n *     ))}\r\n *   </AnimatePresence>\r\n * )\r\n * ```\r\n *\r\n * You can sequence exit animations throughout a tree using variants.\r\n *\r\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\r\n * once all `motion` components have finished animating out. Likewise, any components using\r\n * `usePresence` all need to call `safeToRemove`.\r\n *\r\n * @public\r\n */\nconst AnimatePresence = ({\n  children,\n  custom,\n  initial = true,\n  onExitComplete,\n  exitBeforeEnter,\n  presenceAffectsLayout = true,\n  mode = \"sync\"\n}) => {\n  invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n  // We want to force a re-render once all exiting animations have finished. We\n  // either use a local forceRender function, or one from a parent context if it exists.\n  const forceRender = useContext(LayoutGroupContext).forceRender || useForceUpdate()[0];\n  const isMounted = useIsMounted();\n  // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n  const filteredChildren = onlyElements(children);\n  let childrenToRender = filteredChildren;\n  const exitingChildren = useRef(new Map()).current;\n  // Keep a living record of the children we're actually rendering so we\n  // can diff to figure out which are entering and exiting\n  const presentChildren = useRef(childrenToRender);\n  // A lookup table to quickly reference components by key\n  const allChildren = useRef(new Map()).current;\n  // If this is the initial component render, just deal with logic surrounding whether\n  // we play onMount animations or not.\n  const isInitialRender = useRef(true);\n  useIsomorphicLayoutEffect(() => {\n    isInitialRender.current = false;\n    updateChildLookup(filteredChildren, allChildren);\n    presentChildren.current = childrenToRender;\n  });\n  useUnmountEffect(() => {\n    isInitialRender.current = true;\n    allChildren.clear();\n    exitingChildren.clear();\n  });\n  if (isInitialRender.current) {\n    return React.createElement(React.Fragment, null, childrenToRender.map(child => React.createElement(PresenceChild, {\n      key: getChildKey(child),\n      isPresent: true,\n      initial: initial ? undefined : false,\n      presenceAffectsLayout: presenceAffectsLayout,\n      mode: mode\n    }, child)));\n  }\n  // If this is a subsequent render, deal with entering and exiting children\n  childrenToRender = [...childrenToRender];\n  // Diff the keys of the currently-present and target children to update our\n  // exiting list.\n  const presentKeys = presentChildren.current.map(getChildKey);\n  const targetKeys = filteredChildren.map(getChildKey);\n  // Diff the present children with our target children and mark those that are exiting\n  const numPresent = presentKeys.length;\n  for (let i = 0; i < numPresent; i++) {\n    const key = presentKeys[i];\n    if (targetKeys.indexOf(key) === -1 && !exitingChildren.has(key)) {\n      exitingChildren.set(key, undefined);\n    }\n  }\n  // If we currently have exiting children, and we're deferring rendering incoming children\n  // until after all current children have exiting, empty the childrenToRender array\n  if (mode === \"wait\" && exitingChildren.size) {\n    childrenToRender = [];\n  }\n  // Loop through all currently exiting components and clone them to overwrite `animate`\n  // with any `exit` prop they might have defined.\n  exitingChildren.forEach((component, key) => {\n    // If this component is actually entering again, early return\n    if (targetKeys.indexOf(key) !== -1) return;\n    const child = allChildren.get(key);\n    if (!child) return;\n    const insertionIndex = presentKeys.indexOf(key);\n    let exitingComponent = component;\n    if (!exitingComponent) {\n      const onExit = () => {\n        allChildren.delete(key);\n        exitingChildren.delete(key);\n        // Remove this child from the present children\n        const removeIndex = presentChildren.current.findIndex(presentChild => presentChild.key === key);\n        presentChildren.current.splice(removeIndex, 1);\n        // Defer re-rendering until all exiting children have indeed left\n        if (!exitingChildren.size) {\n          presentChildren.current = filteredChildren;\n          if (isMounted.current === false) return;\n          forceRender();\n          onExitComplete && onExitComplete();\n        }\n      };\n      exitingComponent = React.createElement(PresenceChild, {\n        key: getChildKey(child),\n        isPresent: false,\n        onExitComplete: onExit,\n        custom: custom,\n        presenceAffectsLayout: presenceAffectsLayout,\n        mode: mode\n      }, child);\n      exitingChildren.set(key, exitingComponent);\n    }\n    childrenToRender.splice(insertionIndex, 0, exitingComponent);\n  });\n  // Add `MotionContext` even to children that don't need it to ensure we're rendering\n  // the same tree between renders\n  childrenToRender = childrenToRender.map(child => {\n    const key = child.key;\n    return exitingChildren.has(key) ? child : React.createElement(PresenceChild, {\n      key: getChildKey(child),\n      isPresent: true,\n      presenceAffectsLayout: presenceAffectsLayout,\n      mode: mode\n    }, child);\n  });\n  if (process.env.NODE_ENV !== \"production\" && mode === \"wait\" && childrenToRender.length > 1) {\n    console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n  }\n  return React.createElement(React.Fragment, null, exitingChildren.size ? childrenToRender : childrenToRender.map(child => cloneElement(child)));\n};\nexport { AnimatePresence };","map":{"version":3,"names":["React","useContext","useRef","cloneElement","Children","isValidElement","useForceUpdate","useIsMounted","PresenceChild","LayoutGroupContext","useIsomorphicLayoutEffect","useUnmountEffect","invariant","getChildKey","child","key","updateChildLookup","children","allChildren","forEach","set","onlyElements","filtered","push","AnimatePresence","custom","initial","onExitComplete","exitBeforeEnter","presenceAffectsLayout","mode","forceRender","isMounted","filteredChildren","childrenToRender","exitingChildren","Map","current","presentChildren","isInitialRender","clear","createElement","Fragment","map","isPresent","undefined","presentKeys","targetKeys","numPresent","length","i","indexOf","has","size","component","get","insertionIndex","exitingComponent","onExit","delete","removeIndex","findIndex","presentChild","splice","process","env","NODE_ENV","console","warn"],"sources":["C:/Users/k546k/Desktop/대외용 및 혼자 공부한 자료/멋쟁이사자/ShareIT-Frontend/shareit_frontend/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs"],"sourcesContent":["import * as React from 'react';\r\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\r\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\r\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\r\nimport { PresenceChild } from './PresenceChild.mjs';\r\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\r\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\r\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\r\nimport { invariant } from '../../utils/errors.mjs';\r\n\r\nconst getChildKey = (child) => child.key || \"\";\r\nfunction updateChildLookup(children, allChildren) {\r\n    children.forEach((child) => {\r\n        const key = getChildKey(child);\r\n        allChildren.set(key, child);\r\n    });\r\n}\r\nfunction onlyElements(children) {\r\n    const filtered = [];\r\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\r\n    Children.forEach(children, (child) => {\r\n        if (isValidElement(child))\r\n            filtered.push(child);\r\n    });\r\n    return filtered;\r\n}\r\n/**\r\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\r\n *\r\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\r\n *\r\n * Any `motion` components that have an `exit` property defined will animate out when removed from\r\n * the tree.\r\n *\r\n * ```jsx\r\n * import { motion, AnimatePresence } from 'framer-motion'\r\n *\r\n * export const Items = ({ items }) => (\r\n *   <AnimatePresence>\r\n *     {items.map(item => (\r\n *       <motion.div\r\n *         key={item.id}\r\n *         initial={{ opacity: 0 }}\r\n *         animate={{ opacity: 1 }}\r\n *         exit={{ opacity: 0 }}\r\n *       />\r\n *     ))}\r\n *   </AnimatePresence>\r\n * )\r\n * ```\r\n *\r\n * You can sequence exit animations throughout a tree using variants.\r\n *\r\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\r\n * once all `motion` components have finished animating out. Likewise, any components using\r\n * `usePresence` all need to call `safeToRemove`.\r\n *\r\n * @public\r\n */\r\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = \"sync\", }) => {\r\n    invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\r\n    // We want to force a re-render once all exiting animations have finished. We\r\n    // either use a local forceRender function, or one from a parent context if it exists.\r\n    const forceRender = useContext(LayoutGroupContext).forceRender || useForceUpdate()[0];\r\n    const isMounted = useIsMounted();\r\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\r\n    const filteredChildren = onlyElements(children);\r\n    let childrenToRender = filteredChildren;\r\n    const exitingChildren = useRef(new Map()).current;\r\n    // Keep a living record of the children we're actually rendering so we\r\n    // can diff to figure out which are entering and exiting\r\n    const presentChildren = useRef(childrenToRender);\r\n    // A lookup table to quickly reference components by key\r\n    const allChildren = useRef(new Map()).current;\r\n    // If this is the initial component render, just deal with logic surrounding whether\r\n    // we play onMount animations or not.\r\n    const isInitialRender = useRef(true);\r\n    useIsomorphicLayoutEffect(() => {\r\n        isInitialRender.current = false;\r\n        updateChildLookup(filteredChildren, allChildren);\r\n        presentChildren.current = childrenToRender;\r\n    });\r\n    useUnmountEffect(() => {\r\n        isInitialRender.current = true;\r\n        allChildren.clear();\r\n        exitingChildren.clear();\r\n    });\r\n    if (isInitialRender.current) {\r\n        return (React.createElement(React.Fragment, null, childrenToRender.map((child) => (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child)))));\r\n    }\r\n    // If this is a subsequent render, deal with entering and exiting children\r\n    childrenToRender = [...childrenToRender];\r\n    // Diff the keys of the currently-present and target children to update our\r\n    // exiting list.\r\n    const presentKeys = presentChildren.current.map(getChildKey);\r\n    const targetKeys = filteredChildren.map(getChildKey);\r\n    // Diff the present children with our target children and mark those that are exiting\r\n    const numPresent = presentKeys.length;\r\n    for (let i = 0; i < numPresent; i++) {\r\n        const key = presentKeys[i];\r\n        if (targetKeys.indexOf(key) === -1 && !exitingChildren.has(key)) {\r\n            exitingChildren.set(key, undefined);\r\n        }\r\n    }\r\n    // If we currently have exiting children, and we're deferring rendering incoming children\r\n    // until after all current children have exiting, empty the childrenToRender array\r\n    if (mode === \"wait\" && exitingChildren.size) {\r\n        childrenToRender = [];\r\n    }\r\n    // Loop through all currently exiting components and clone them to overwrite `animate`\r\n    // with any `exit` prop they might have defined.\r\n    exitingChildren.forEach((component, key) => {\r\n        // If this component is actually entering again, early return\r\n        if (targetKeys.indexOf(key) !== -1)\r\n            return;\r\n        const child = allChildren.get(key);\r\n        if (!child)\r\n            return;\r\n        const insertionIndex = presentKeys.indexOf(key);\r\n        let exitingComponent = component;\r\n        if (!exitingComponent) {\r\n            const onExit = () => {\r\n                allChildren.delete(key);\r\n                exitingChildren.delete(key);\r\n                // Remove this child from the present children\r\n                const removeIndex = presentChildren.current.findIndex((presentChild) => presentChild.key === key);\r\n                presentChildren.current.splice(removeIndex, 1);\r\n                // Defer re-rendering until all exiting children have indeed left\r\n                if (!exitingChildren.size) {\r\n                    presentChildren.current = filteredChildren;\r\n                    if (isMounted.current === false)\r\n                        return;\r\n                    forceRender();\r\n                    onExitComplete && onExitComplete();\r\n                }\r\n            };\r\n            exitingComponent = (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\r\n            exitingChildren.set(key, exitingComponent);\r\n        }\r\n        childrenToRender.splice(insertionIndex, 0, exitingComponent);\r\n    });\r\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\r\n    // the same tree between renders\r\n    childrenToRender = childrenToRender.map((child) => {\r\n        const key = child.key;\r\n        return exitingChildren.has(key) ? (child) : (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\r\n    });\r\n    if (process.env.NODE_ENV !== \"production\" &&\r\n        mode === \"wait\" &&\r\n        childrenToRender.length > 1) {\r\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\r\n    }\r\n    return (React.createElement(React.Fragment, null, exitingChildren.size\r\n        ? childrenToRender\r\n        : childrenToRender.map((child) => cloneElement(child))));\r\n};\r\n\r\nexport { AnimatePresence };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}