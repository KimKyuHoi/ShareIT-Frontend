{"ast":null,"code":"import _classCallCheck from \"C:/Users/k546k/Desktop/\\uBA4B\\uC7C1\\uC774\\uC0AC\\uC790/\\uC250\\uC5B4\\uC787/shareit_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/k546k/Desktop/\\uBA4B\\uC7C1\\uC774\\uC0AC\\uC790/\\uC250\\uC5B4\\uC787/shareit_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { addUniqueItem, removeItem } from '../../utils/array.mjs';\nvar NodeStack = /*#__PURE__*/function () {\n  function NodeStack() {\n    _classCallCheck(this, NodeStack);\n    this.members = [];\n  }\n  _createClass(NodeStack, [{\n    key: \"add\",\n    value: function add(node) {\n      addUniqueItem(this.members, node);\n      node.scheduleRender();\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(node) {\n      removeItem(this.members, node);\n      if (node === this.prevLead) {\n        this.prevLead = undefined;\n      }\n      if (node === this.lead) {\n        var prevLead = this.members[this.members.length - 1];\n        if (prevLead) {\n          this.promote(prevLead);\n        }\n      }\n    }\n  }, {\n    key: \"relegate\",\n    value: function relegate(node) {\n      var indexOfNode = this.members.findIndex(function (member) {\n        return node === member;\n      });\n      if (indexOfNode === 0) return false;\n      /**\r\n       * Find the next projection node that is present\r\n       */\n      var prevLead;\n      for (var i = indexOfNode; i >= 0; i--) {\n        var member = this.members[i];\n        if (member.isPresent !== false) {\n          prevLead = member;\n          break;\n        }\n      }\n      if (prevLead) {\n        this.promote(prevLead);\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"promote\",\n    value: function promote(node, preserveFollowOpacity) {\n      var prevLead = this.lead;\n      if (node === prevLead) return;\n      this.prevLead = prevLead;\n      this.lead = node;\n      node.show();\n      if (prevLead) {\n        prevLead.instance && prevLead.scheduleRender();\n        node.scheduleRender();\n        node.resumeFrom = prevLead;\n        if (preserveFollowOpacity) {\n          node.resumeFrom.preserveOpacity = true;\n        }\n        if (prevLead.snapshot) {\n          node.snapshot = prevLead.snapshot;\n          node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;\n        }\n        if (node.root && node.root.isUpdating) {\n          node.isLayoutDirty = true;\n        }\n        var crossfade = node.options.crossfade;\n        if (crossfade === false) {\n          prevLead.hide();\n        }\n        /**\r\n         * TODO:\r\n         *   - Test border radius when previous node was deleted\r\n         *   - boxShadow mixing\r\n         *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\r\n         *   - Shared between element A in transformed container and element B (transform stays the same or changes)\r\n         *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\r\n         * ---\r\n         *   - Crossfade opacity of root nodes\r\n         *   - layoutId changes after animation\r\n         *   - layoutId changes mid animation\r\n         */\n      }\n    }\n  }, {\n    key: \"exitAnimationComplete\",\n    value: function exitAnimationComplete() {\n      this.members.forEach(function (node) {\n        var options = node.options,\n          resumingFrom = node.resumingFrom;\n        options.onExitComplete && options.onExitComplete();\n        if (resumingFrom) {\n          resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();\n        }\n      });\n    }\n  }, {\n    key: \"scheduleRender\",\n    value: function scheduleRender() {\n      this.members.forEach(function (node) {\n        node.instance && node.scheduleRender(false);\n      });\n    }\n    /**\r\n     * Clear any leads that have been removed this render to prevent them from being\r\n     * used in future animations and to prevent memory leaks\r\n     */\n  }, {\n    key: \"removeLeadSnapshot\",\n    value: function removeLeadSnapshot() {\n      if (this.lead && this.lead.snapshot) {\n        this.lead.snapshot = undefined;\n      }\n    }\n  }]);\n  return NodeStack;\n}();\nexport { NodeStack };","map":{"version":3,"names":["addUniqueItem","removeItem","NodeStack","_classCallCheck","members","_createClass","key","value","add","node","scheduleRender","remove","prevLead","undefined","lead","length","promote","relegate","indexOfNode","findIndex","member","i","isPresent","preserveFollowOpacity","show","instance","resumeFrom","preserveOpacity","snapshot","latestValues","animationValues","root","isUpdating","isLayoutDirty","crossfade","options","hide","exitAnimationComplete","forEach","resumingFrom","onExitComplete","removeLeadSnapshot"],"sources":["C:/Users/k546k/Desktop/멋쟁이사자/쉐어잇/shareit_frontend/node_modules/framer-motion/dist/es/projection/shared/stack.mjs"],"sourcesContent":["import { addUniqueItem, removeItem } from '../../utils/array.mjs';\r\n\r\nclass NodeStack {\r\n    constructor() {\r\n        this.members = [];\r\n    }\r\n    add(node) {\r\n        addUniqueItem(this.members, node);\r\n        node.scheduleRender();\r\n    }\r\n    remove(node) {\r\n        removeItem(this.members, node);\r\n        if (node === this.prevLead) {\r\n            this.prevLead = undefined;\r\n        }\r\n        if (node === this.lead) {\r\n            const prevLead = this.members[this.members.length - 1];\r\n            if (prevLead) {\r\n                this.promote(prevLead);\r\n            }\r\n        }\r\n    }\r\n    relegate(node) {\r\n        const indexOfNode = this.members.findIndex((member) => node === member);\r\n        if (indexOfNode === 0)\r\n            return false;\r\n        /**\r\n         * Find the next projection node that is present\r\n         */\r\n        let prevLead;\r\n        for (let i = indexOfNode; i >= 0; i--) {\r\n            const member = this.members[i];\r\n            if (member.isPresent !== false) {\r\n                prevLead = member;\r\n                break;\r\n            }\r\n        }\r\n        if (prevLead) {\r\n            this.promote(prevLead);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    promote(node, preserveFollowOpacity) {\r\n        const prevLead = this.lead;\r\n        if (node === prevLead)\r\n            return;\r\n        this.prevLead = prevLead;\r\n        this.lead = node;\r\n        node.show();\r\n        if (prevLead) {\r\n            prevLead.instance && prevLead.scheduleRender();\r\n            node.scheduleRender();\r\n            node.resumeFrom = prevLead;\r\n            if (preserveFollowOpacity) {\r\n                node.resumeFrom.preserveOpacity = true;\r\n            }\r\n            if (prevLead.snapshot) {\r\n                node.snapshot = prevLead.snapshot;\r\n                node.snapshot.latestValues =\r\n                    prevLead.animationValues || prevLead.latestValues;\r\n            }\r\n            if (node.root && node.root.isUpdating) {\r\n                node.isLayoutDirty = true;\r\n            }\r\n            const { crossfade } = node.options;\r\n            if (crossfade === false) {\r\n                prevLead.hide();\r\n            }\r\n            /**\r\n             * TODO:\r\n             *   - Test border radius when previous node was deleted\r\n             *   - boxShadow mixing\r\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\r\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\r\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\r\n             * ---\r\n             *   - Crossfade opacity of root nodes\r\n             *   - layoutId changes after animation\r\n             *   - layoutId changes mid animation\r\n             */\r\n        }\r\n    }\r\n    exitAnimationComplete() {\r\n        this.members.forEach((node) => {\r\n            const { options, resumingFrom } = node;\r\n            options.onExitComplete && options.onExitComplete();\r\n            if (resumingFrom) {\r\n                resumingFrom.options.onExitComplete &&\r\n                    resumingFrom.options.onExitComplete();\r\n            }\r\n        });\r\n    }\r\n    scheduleRender() {\r\n        this.members.forEach((node) => {\r\n            node.instance && node.scheduleRender(false);\r\n        });\r\n    }\r\n    /**\r\n     * Clear any leads that have been removed this render to prevent them from being\r\n     * used in future animations and to prevent memory leaks\r\n     */\r\n    removeLeadSnapshot() {\r\n        if (this.lead && this.lead.snapshot) {\r\n            this.lead.snapshot = undefined;\r\n        }\r\n    }\r\n}\r\n\r\nexport { NodeStack };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}