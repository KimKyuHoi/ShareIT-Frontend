{"ast":null,"code":"import { createGeneratorEasing } from '../../easing/utils/create-generator-easing.mjs';\nimport { resolveElements } from '../../render/dom/utils/resolve-element.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { fillOffset } from '../../utils/offsets/fill.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { calcNextTime } from './utils/calc-time.mjs';\nimport { addKeyframes } from './utils/edit.mjs';\nimport { compareByTime } from './utils/sort.mjs';\nconst defaultSegmentEasing = \"easeInOut\";\nfunction createAnimationsFromSequence(sequence, {\n  defaultTransition = {},\n  ...sequenceTransition\n} = {}, scope) {\n  const defaultDuration = defaultTransition.duration || 0.3;\n  const animationDefinitions = new Map();\n  const sequences = new Map();\n  const elementCache = {};\n  const timeLabels = new Map();\n  let prevTime = 0;\n  let currentTime = 0;\n  let totalDuration = 0;\n  /**\r\n   * Build the timeline by mapping over the sequence array and converting\r\n   * the definitions into keyframes and offsets with absolute time values.\r\n   * These will later get converted into relative offsets in a second pass.\r\n   */\n  for (let i = 0; i < sequence.length; i++) {\n    const segment = sequence[i];\n    /**\r\n     * If this is a timeline label, mark it and skip the rest of this iteration.\r\n     */\n    if (typeof segment === \"string\") {\n      timeLabels.set(segment, currentTime);\n      continue;\n    } else if (!Array.isArray(segment)) {\n      timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\n      continue;\n    }\n    let [subject, keyframes, transition = {}] = segment;\n    /**\r\n     * If a relative or absolute time value has been specified we need to resolve\r\n     * it in relation to the currentTime.\r\n     */\n    if (transition.at !== undefined) {\n      currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels);\n    }\n    /**\r\n     * Keep track of the maximum duration in this definition. This will be\r\n     * applied to currentTime once the definition has been parsed.\r\n     */\n    let maxDuration = 0;\n    const resolveValueSequence = (valueKeyframes, valueTransition, valueSequence, elementIndex = 0, numElements = 0) => {\n      const valueKeyframesAsList = keyframesAsList(valueKeyframes);\n      const {\n        delay = 0,\n        times = defaultOffset(valueKeyframesAsList),\n        type = \"keyframes\",\n        ...remainingTransition\n      } = valueTransition;\n      let {\n        ease = defaultTransition.ease || \"easeOut\",\n        duration\n      } = valueTransition;\n      /**\r\n       * Resolve stagger() if defined.\r\n       */\n      const calculatedDelay = typeof delay === \"function\" ? delay(elementIndex, numElements) : delay;\n      /**\r\n       * If this animation should and can use a spring, generate a spring easing function.\r\n       */\n      const numKeyframes = valueKeyframesAsList.length;\n      if (numKeyframes <= 2 && type === \"spring\") {\n        /**\r\n         * As we're creating an easing function from a spring,\r\n         * ideally we want to generate it using the real distance\r\n         * between the two keyframes. However this isn't always\r\n         * possible - in these situations we use 0-100.\r\n         */\n        let absoluteDelta = 100;\n        if (numKeyframes === 2 && isNumberKeyframesArray(valueKeyframesAsList)) {\n          const delta = valueKeyframesAsList[1] - valueKeyframesAsList[0];\n          absoluteDelta = Math.abs(delta);\n        }\n        const springTransition = {\n          ...remainingTransition\n        };\n        if (duration !== undefined) {\n          springTransition.duration = secondsToMilliseconds(duration);\n        }\n        const springEasing = createGeneratorEasing(springTransition, absoluteDelta);\n        ease = springEasing.ease;\n        duration = springEasing.duration;\n      }\n      duration !== null && duration !== void 0 ? duration : duration = defaultDuration;\n      const startTime = currentTime + calculatedDelay;\n      const targetTime = startTime + duration;\n      /**\r\n       * If there's only one time offset of 0, fill in a second with length 1\r\n       */\n      if (times.length === 1 && times[0] === 0) {\n        times[1] = 1;\n      }\n      /**\r\n       * Fill out if offset if fewer offsets than keyframes\r\n       */\n      const remainder = times.length - valueKeyframesAsList.length;\n      remainder > 0 && fillOffset(times, remainder);\n      /**\r\n       * If only one value has been set, ie [1], push a null to the start of\r\n       * the keyframe array. This will let us mark a keyframe at this point\r\n       * that will later be hydrated with the previous value.\r\n       */\n      valueKeyframesAsList.length === 1 && valueKeyframesAsList.unshift(null);\n      /**\r\n       * Add keyframes, mapping offsets to absolute time.\r\n       */\n      addKeyframes(valueSequence, valueKeyframesAsList, ease, times, startTime, targetTime);\n      maxDuration = Math.max(calculatedDelay + duration, maxDuration);\n      totalDuration = Math.max(targetTime, totalDuration);\n    };\n    if (isMotionValue(subject)) {\n      const subjectSequence = getSubjectSequence(subject, sequences);\n      resolveValueSequence(keyframes, transition, getValueSequence(\"default\", subjectSequence));\n    } else {\n      /**\r\n       * Find all the elements specified in the definition and parse value\r\n       * keyframes from their timeline definitions.\r\n       */\n      const elements = resolveElements(subject, scope, elementCache);\n      const numElements = elements.length;\n      /**\r\n       * For every element in this segment, process the defined values.\r\n       */\n      for (let elementIndex = 0; elementIndex < numElements; elementIndex++) {\n        /**\r\n         * Cast necessary, but we know these are of this type\r\n         */\n        keyframes = keyframes;\n        transition = transition;\n        const element = elements[elementIndex];\n        const subjectSequence = getSubjectSequence(element, sequences);\n        for (const key in keyframes) {\n          resolveValueSequence(keyframes[key], getValueTransition(transition, key), getValueSequence(key, subjectSequence), elementIndex, numElements);\n        }\n      }\n      prevTime = currentTime;\n      currentTime += maxDuration;\n    }\n  }\n  /**\r\n   * For every element and value combination create a new animation.\r\n   */\n  sequences.forEach((valueSequences, element) => {\n    for (const key in valueSequences) {\n      const valueSequence = valueSequences[key];\n      /**\r\n       * Arrange all the keyframes in ascending time order.\r\n       */\n      valueSequence.sort(compareByTime);\n      const keyframes = [];\n      const valueOffset = [];\n      const valueEasing = [];\n      /**\r\n       * For each keyframe, translate absolute times into\r\n       * relative offsets based on the total duration of the timeline.\r\n       */\n      for (let i = 0; i < valueSequence.length; i++) {\n        const {\n          at,\n          value,\n          easing\n        } = valueSequence[i];\n        keyframes.push(value);\n        valueOffset.push(progress(0, totalDuration, at));\n        valueEasing.push(easing || \"easeOut\");\n      }\n      /**\r\n       * If the first keyframe doesn't land on offset: 0\r\n       * provide one by duplicating the initial keyframe. This ensures\r\n       * it snaps to the first keyframe when the animation starts.\r\n       */\n      if (valueOffset[0] !== 0) {\n        valueOffset.unshift(0);\n        keyframes.unshift(keyframes[0]);\n        valueEasing.unshift(defaultSegmentEasing);\n      }\n      /**\r\n       * If the last keyframe doesn't land on offset: 1\r\n       * provide one with a null wildcard value. This will ensure it\r\n       * stays static until the end of the animation.\r\n       */\n      if (valueOffset[valueOffset.length - 1] !== 1) {\n        valueOffset.push(1);\n        keyframes.push(null);\n      }\n      if (!animationDefinitions.has(element)) {\n        animationDefinitions.set(element, {\n          keyframes: {},\n          transition: {}\n        });\n      }\n      const definition = animationDefinitions.get(element);\n      definition.keyframes[key] = keyframes;\n      definition.transition[key] = {\n        ...defaultTransition,\n        duration: totalDuration,\n        ease: valueEasing,\n        times: valueOffset,\n        ...sequenceTransition\n      };\n    }\n  });\n  return animationDefinitions;\n}\nfunction getSubjectSequence(subject, sequences) {\n  !sequences.has(subject) && sequences.set(subject, {});\n  return sequences.get(subject);\n}\nfunction getValueSequence(name, sequences) {\n  if (!sequences[name]) sequences[name] = [];\n  return sequences[name];\n}\nfunction keyframesAsList(keyframes) {\n  return Array.isArray(keyframes) ? keyframes : [keyframes];\n}\nfunction getValueTransition(transition, key) {\n  return transition[key] ? {\n    ...transition,\n    ...transition[key]\n  } : {\n    ...transition\n  };\n}\nconst isNumber = keyframe => typeof keyframe === \"number\";\nconst isNumberKeyframesArray = keyframes => keyframes.every(isNumber);\nexport { createAnimationsFromSequence, getValueTransition };","map":{"version":3,"names":["createGeneratorEasing","resolveElements","defaultOffset","fillOffset","progress","secondsToMilliseconds","isMotionValue","calcNextTime","addKeyframes","compareByTime","defaultSegmentEasing","createAnimationsFromSequence","sequence","defaultTransition","sequenceTransition","scope","defaultDuration","duration","animationDefinitions","Map","sequences","elementCache","timeLabels","prevTime","currentTime","totalDuration","i","length","segment","set","Array","isArray","name","at","subject","keyframes","transition","undefined","maxDuration","resolveValueSequence","valueKeyframes","valueTransition","valueSequence","elementIndex","numElements","valueKeyframesAsList","keyframesAsList","delay","times","type","remainingTransition","ease","calculatedDelay","numKeyframes","absoluteDelta","isNumberKeyframesArray","delta","Math","abs","springTransition","springEasing","startTime","targetTime","remainder","unshift","max","subjectSequence","getSubjectSequence","getValueSequence","elements","element","key","getValueTransition","forEach","valueSequences","sort","valueOffset","valueEasing","value","easing","push","has","definition","get","isNumber","keyframe","every"],"sources":["C:/Users/k546k/Desktop/멋쟁이사자/쉐어잇/shareit_frontend/node_modules/framer-motion/dist/es/animation/sequence/create.mjs"],"sourcesContent":["import { createGeneratorEasing } from '../../easing/utils/create-generator-easing.mjs';\r\nimport { resolveElements } from '../../render/dom/utils/resolve-element.mjs';\r\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\r\nimport { fillOffset } from '../../utils/offsets/fill.mjs';\r\nimport { progress } from '../../utils/progress.mjs';\r\nimport { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\r\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\r\nimport { calcNextTime } from './utils/calc-time.mjs';\r\nimport { addKeyframes } from './utils/edit.mjs';\r\nimport { compareByTime } from './utils/sort.mjs';\r\n\r\nconst defaultSegmentEasing = \"easeInOut\";\r\nfunction createAnimationsFromSequence(sequence, { defaultTransition = {}, ...sequenceTransition } = {}, scope) {\r\n    const defaultDuration = defaultTransition.duration || 0.3;\r\n    const animationDefinitions = new Map();\r\n    const sequences = new Map();\r\n    const elementCache = {};\r\n    const timeLabels = new Map();\r\n    let prevTime = 0;\r\n    let currentTime = 0;\r\n    let totalDuration = 0;\r\n    /**\r\n     * Build the timeline by mapping over the sequence array and converting\r\n     * the definitions into keyframes and offsets with absolute time values.\r\n     * These will later get converted into relative offsets in a second pass.\r\n     */\r\n    for (let i = 0; i < sequence.length; i++) {\r\n        const segment = sequence[i];\r\n        /**\r\n         * If this is a timeline label, mark it and skip the rest of this iteration.\r\n         */\r\n        if (typeof segment === \"string\") {\r\n            timeLabels.set(segment, currentTime);\r\n            continue;\r\n        }\r\n        else if (!Array.isArray(segment)) {\r\n            timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\r\n            continue;\r\n        }\r\n        let [subject, keyframes, transition = {}] = segment;\r\n        /**\r\n         * If a relative or absolute time value has been specified we need to resolve\r\n         * it in relation to the currentTime.\r\n         */\r\n        if (transition.at !== undefined) {\r\n            currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels);\r\n        }\r\n        /**\r\n         * Keep track of the maximum duration in this definition. This will be\r\n         * applied to currentTime once the definition has been parsed.\r\n         */\r\n        let maxDuration = 0;\r\n        const resolveValueSequence = (valueKeyframes, valueTransition, valueSequence, elementIndex = 0, numElements = 0) => {\r\n            const valueKeyframesAsList = keyframesAsList(valueKeyframes);\r\n            const { delay = 0, times = defaultOffset(valueKeyframesAsList), type = \"keyframes\", ...remainingTransition } = valueTransition;\r\n            let { ease = defaultTransition.ease || \"easeOut\", duration } = valueTransition;\r\n            /**\r\n             * Resolve stagger() if defined.\r\n             */\r\n            const calculatedDelay = typeof delay === \"function\"\r\n                ? delay(elementIndex, numElements)\r\n                : delay;\r\n            /**\r\n             * If this animation should and can use a spring, generate a spring easing function.\r\n             */\r\n            const numKeyframes = valueKeyframesAsList.length;\r\n            if (numKeyframes <= 2 && type === \"spring\") {\r\n                /**\r\n                 * As we're creating an easing function from a spring,\r\n                 * ideally we want to generate it using the real distance\r\n                 * between the two keyframes. However this isn't always\r\n                 * possible - in these situations we use 0-100.\r\n                 */\r\n                let absoluteDelta = 100;\r\n                if (numKeyframes === 2 &&\r\n                    isNumberKeyframesArray(valueKeyframesAsList)) {\r\n                    const delta = valueKeyframesAsList[1] - valueKeyframesAsList[0];\r\n                    absoluteDelta = Math.abs(delta);\r\n                }\r\n                const springTransition = { ...remainingTransition };\r\n                if (duration !== undefined) {\r\n                    springTransition.duration = secondsToMilliseconds(duration);\r\n                }\r\n                const springEasing = createGeneratorEasing(springTransition, absoluteDelta);\r\n                ease = springEasing.ease;\r\n                duration = springEasing.duration;\r\n            }\r\n            duration !== null && duration !== void 0 ? duration : (duration = defaultDuration);\r\n            const startTime = currentTime + calculatedDelay;\r\n            const targetTime = startTime + duration;\r\n            /**\r\n             * If there's only one time offset of 0, fill in a second with length 1\r\n             */\r\n            if (times.length === 1 && times[0] === 0) {\r\n                times[1] = 1;\r\n            }\r\n            /**\r\n             * Fill out if offset if fewer offsets than keyframes\r\n             */\r\n            const remainder = times.length - valueKeyframesAsList.length;\r\n            remainder > 0 && fillOffset(times, remainder);\r\n            /**\r\n             * If only one value has been set, ie [1], push a null to the start of\r\n             * the keyframe array. This will let us mark a keyframe at this point\r\n             * that will later be hydrated with the previous value.\r\n             */\r\n            valueKeyframesAsList.length === 1 &&\r\n                valueKeyframesAsList.unshift(null);\r\n            /**\r\n             * Add keyframes, mapping offsets to absolute time.\r\n             */\r\n            addKeyframes(valueSequence, valueKeyframesAsList, ease, times, startTime, targetTime);\r\n            maxDuration = Math.max(calculatedDelay + duration, maxDuration);\r\n            totalDuration = Math.max(targetTime, totalDuration);\r\n        };\r\n        if (isMotionValue(subject)) {\r\n            const subjectSequence = getSubjectSequence(subject, sequences);\r\n            resolveValueSequence(keyframes, transition, getValueSequence(\"default\", subjectSequence));\r\n        }\r\n        else {\r\n            /**\r\n             * Find all the elements specified in the definition and parse value\r\n             * keyframes from their timeline definitions.\r\n             */\r\n            const elements = resolveElements(subject, scope, elementCache);\r\n            const numElements = elements.length;\r\n            /**\r\n             * For every element in this segment, process the defined values.\r\n             */\r\n            for (let elementIndex = 0; elementIndex < numElements; elementIndex++) {\r\n                /**\r\n                 * Cast necessary, but we know these are of this type\r\n                 */\r\n                keyframes = keyframes;\r\n                transition = transition;\r\n                const element = elements[elementIndex];\r\n                const subjectSequence = getSubjectSequence(element, sequences);\r\n                for (const key in keyframes) {\r\n                    resolveValueSequence(keyframes[key], getValueTransition(transition, key), getValueSequence(key, subjectSequence), elementIndex, numElements);\r\n                }\r\n            }\r\n            prevTime = currentTime;\r\n            currentTime += maxDuration;\r\n        }\r\n    }\r\n    /**\r\n     * For every element and value combination create a new animation.\r\n     */\r\n    sequences.forEach((valueSequences, element) => {\r\n        for (const key in valueSequences) {\r\n            const valueSequence = valueSequences[key];\r\n            /**\r\n             * Arrange all the keyframes in ascending time order.\r\n             */\r\n            valueSequence.sort(compareByTime);\r\n            const keyframes = [];\r\n            const valueOffset = [];\r\n            const valueEasing = [];\r\n            /**\r\n             * For each keyframe, translate absolute times into\r\n             * relative offsets based on the total duration of the timeline.\r\n             */\r\n            for (let i = 0; i < valueSequence.length; i++) {\r\n                const { at, value, easing } = valueSequence[i];\r\n                keyframes.push(value);\r\n                valueOffset.push(progress(0, totalDuration, at));\r\n                valueEasing.push(easing || \"easeOut\");\r\n            }\r\n            /**\r\n             * If the first keyframe doesn't land on offset: 0\r\n             * provide one by duplicating the initial keyframe. This ensures\r\n             * it snaps to the first keyframe when the animation starts.\r\n             */\r\n            if (valueOffset[0] !== 0) {\r\n                valueOffset.unshift(0);\r\n                keyframes.unshift(keyframes[0]);\r\n                valueEasing.unshift(defaultSegmentEasing);\r\n            }\r\n            /**\r\n             * If the last keyframe doesn't land on offset: 1\r\n             * provide one with a null wildcard value. This will ensure it\r\n             * stays static until the end of the animation.\r\n             */\r\n            if (valueOffset[valueOffset.length - 1] !== 1) {\r\n                valueOffset.push(1);\r\n                keyframes.push(null);\r\n            }\r\n            if (!animationDefinitions.has(element)) {\r\n                animationDefinitions.set(element, {\r\n                    keyframes: {},\r\n                    transition: {},\r\n                });\r\n            }\r\n            const definition = animationDefinitions.get(element);\r\n            definition.keyframes[key] = keyframes;\r\n            definition.transition[key] = {\r\n                ...defaultTransition,\r\n                duration: totalDuration,\r\n                ease: valueEasing,\r\n                times: valueOffset,\r\n                ...sequenceTransition,\r\n            };\r\n        }\r\n    });\r\n    return animationDefinitions;\r\n}\r\nfunction getSubjectSequence(subject, sequences) {\r\n    !sequences.has(subject) && sequences.set(subject, {});\r\n    return sequences.get(subject);\r\n}\r\nfunction getValueSequence(name, sequences) {\r\n    if (!sequences[name])\r\n        sequences[name] = [];\r\n    return sequences[name];\r\n}\r\nfunction keyframesAsList(keyframes) {\r\n    return Array.isArray(keyframes) ? keyframes : [keyframes];\r\n}\r\nfunction getValueTransition(transition, key) {\r\n    return transition[key]\r\n        ? { ...transition, ...transition[key] }\r\n        : { ...transition };\r\n}\r\nconst isNumber = (keyframe) => typeof keyframe === \"number\";\r\nconst isNumberKeyframesArray = (keyframes) => keyframes.every(isNumber);\r\n\r\nexport { createAnimationsFromSequence, getValueTransition };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}