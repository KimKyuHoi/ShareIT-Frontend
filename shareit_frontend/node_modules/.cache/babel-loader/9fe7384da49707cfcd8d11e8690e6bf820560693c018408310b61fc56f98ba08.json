{"ast":null,"code":"import { spring } from './spring/index.mjs';\nimport { calcGeneratorVelocity } from './utils/velocity.mjs';\nfunction inertia(_ref) {\n  var keyframes = _ref.keyframes,\n    _ref$velocity = _ref.velocity,\n    velocity = _ref$velocity === void 0 ? 0.0 : _ref$velocity,\n    _ref$power = _ref.power,\n    power = _ref$power === void 0 ? 0.8 : _ref$power,\n    _ref$timeConstant = _ref.timeConstant,\n    timeConstant = _ref$timeConstant === void 0 ? 325 : _ref$timeConstant,\n    _ref$bounceDamping = _ref.bounceDamping,\n    bounceDamping = _ref$bounceDamping === void 0 ? 10 : _ref$bounceDamping,\n    _ref$bounceStiffness = _ref.bounceStiffness,\n    bounceStiffness = _ref$bounceStiffness === void 0 ? 500 : _ref$bounceStiffness,\n    modifyTarget = _ref.modifyTarget,\n    min = _ref.min,\n    max = _ref.max,\n    _ref$restDelta = _ref.restDelta,\n    restDelta = _ref$restDelta === void 0 ? 0.5 : _ref$restDelta,\n    restSpeed = _ref.restSpeed;\n  var origin = keyframes[0];\n  var state = {\n    done: false,\n    value: origin\n  };\n  var isOutOfBounds = function isOutOfBounds(v) {\n    return min !== undefined && v < min || max !== undefined && v > max;\n  };\n  var nearestBoundary = function nearestBoundary(v) {\n    if (min === undefined) return max;\n    if (max === undefined) return min;\n    return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n  };\n  var amplitude = power * velocity;\n  var ideal = origin + amplitude;\n  var target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n  /**\r\n   * If the target has changed we need to re-calculate the amplitude, otherwise\r\n   * the animation will start from the wrong position.\r\n   */\n  if (target !== ideal) amplitude = target - origin;\n  var calcDelta = function calcDelta(t) {\n    return -amplitude * Math.exp(-t / timeConstant);\n  };\n  var calcLatest = function calcLatest(t) {\n    return target + calcDelta(t);\n  };\n  var applyFriction = function applyFriction(t) {\n    var delta = calcDelta(t);\n    var latest = calcLatest(t);\n    state.done = Math.abs(delta) <= restDelta;\n    state.value = state.done ? target : latest;\n  };\n  /**\r\n   * Ideally this would resolve for t in a stateless way, we could\r\n   * do that by always precalculating the animation but as we know\r\n   * this will be done anyway we can assume that spring will\r\n   * be discovered during that.\r\n   */\n  var timeReachedBoundary;\n  var spring$1;\n  var checkCatchBoundary = function checkCatchBoundary(t) {\n    if (!isOutOfBounds(state.value)) return;\n    timeReachedBoundary = t;\n    spring$1 = spring({\n      keyframes: [state.value, nearestBoundary(state.value)],\n      velocity: calcGeneratorVelocity(calcLatest, t, state.value),\n      damping: bounceDamping,\n      stiffness: bounceStiffness,\n      restDelta: restDelta,\n      restSpeed: restSpeed\n    });\n  };\n  checkCatchBoundary(0);\n  return {\n    calculatedDuration: null,\n    next: function next(t) {\n      /**\r\n       * We need to resolve the friction to figure out if we need a\r\n       * spring but we don't want to do this twice per frame. So here\r\n       * we flag if we updated for this frame and later if we did\r\n       * we can skip doing it again.\r\n       */\n      var hasUpdatedFrame = false;\n      if (!spring$1 && timeReachedBoundary === undefined) {\n        hasUpdatedFrame = true;\n        applyFriction(t);\n        checkCatchBoundary(t);\n      }\n      /**\r\n       * If we have a spring and the provided t is beyond the moment the friction\r\n       * animation crossed the min/max boundary, use the spring.\r\n       */\n      if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {\n        return spring$1.next(t - timeReachedBoundary);\n      } else {\n        !hasUpdatedFrame && applyFriction(t);\n        return state;\n      }\n    }\n  };\n}\nexport { inertia };","map":{"version":3,"names":["spring","calcGeneratorVelocity","inertia","_ref","keyframes","_ref$velocity","velocity","_ref$power","power","_ref$timeConstant","timeConstant","_ref$bounceDamping","bounceDamping","_ref$bounceStiffness","bounceStiffness","modifyTarget","min","max","_ref$restDelta","restDelta","restSpeed","origin","state","done","value","isOutOfBounds","v","undefined","nearestBoundary","Math","abs","amplitude","ideal","target","calcDelta","t","exp","calcLatest","applyFriction","delta","latest","timeReachedBoundary","spring$1","checkCatchBoundary","damping","stiffness","calculatedDuration","next","hasUpdatedFrame"],"sources":["C:/Users/k546k/Desktop/멋쟁이사자/쉐어잇/shareit_frontend/node_modules/framer-motion/dist/es/animation/generators/inertia.mjs"],"sourcesContent":["import { spring } from './spring/index.mjs';\r\nimport { calcGeneratorVelocity } from './utils/velocity.mjs';\r\n\r\nfunction inertia({ keyframes, velocity = 0.0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed, }) {\r\n    const origin = keyframes[0];\r\n    const state = {\r\n        done: false,\r\n        value: origin,\r\n    };\r\n    const isOutOfBounds = (v) => (min !== undefined && v < min) || (max !== undefined && v > max);\r\n    const nearestBoundary = (v) => {\r\n        if (min === undefined)\r\n            return max;\r\n        if (max === undefined)\r\n            return min;\r\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\r\n    };\r\n    let amplitude = power * velocity;\r\n    const ideal = origin + amplitude;\r\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\r\n    /**\r\n     * If the target has changed we need to re-calculate the amplitude, otherwise\r\n     * the animation will start from the wrong position.\r\n     */\r\n    if (target !== ideal)\r\n        amplitude = target - origin;\r\n    const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant);\r\n    const calcLatest = (t) => target + calcDelta(t);\r\n    const applyFriction = (t) => {\r\n        const delta = calcDelta(t);\r\n        const latest = calcLatest(t);\r\n        state.done = Math.abs(delta) <= restDelta;\r\n        state.value = state.done ? target : latest;\r\n    };\r\n    /**\r\n     * Ideally this would resolve for t in a stateless way, we could\r\n     * do that by always precalculating the animation but as we know\r\n     * this will be done anyway we can assume that spring will\r\n     * be discovered during that.\r\n     */\r\n    let timeReachedBoundary;\r\n    let spring$1;\r\n    const checkCatchBoundary = (t) => {\r\n        if (!isOutOfBounds(state.value))\r\n            return;\r\n        timeReachedBoundary = t;\r\n        spring$1 = spring({\r\n            keyframes: [state.value, nearestBoundary(state.value)],\r\n            velocity: calcGeneratorVelocity(calcLatest, t, state.value),\r\n            damping: bounceDamping,\r\n            stiffness: bounceStiffness,\r\n            restDelta,\r\n            restSpeed,\r\n        });\r\n    };\r\n    checkCatchBoundary(0);\r\n    return {\r\n        calculatedDuration: null,\r\n        next: (t) => {\r\n            /**\r\n             * We need to resolve the friction to figure out if we need a\r\n             * spring but we don't want to do this twice per frame. So here\r\n             * we flag if we updated for this frame and later if we did\r\n             * we can skip doing it again.\r\n             */\r\n            let hasUpdatedFrame = false;\r\n            if (!spring$1 && timeReachedBoundary === undefined) {\r\n                hasUpdatedFrame = true;\r\n                applyFriction(t);\r\n                checkCatchBoundary(t);\r\n            }\r\n            /**\r\n             * If we have a spring and the provided t is beyond the moment the friction\r\n             * animation crossed the min/max boundary, use the spring.\r\n             */\r\n            if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {\r\n                return spring$1.next(t - timeReachedBoundary);\r\n            }\r\n            else {\r\n                !hasUpdatedFrame && applyFriction(t);\r\n                return state;\r\n            }\r\n        },\r\n    };\r\n}\r\n\r\nexport { inertia };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}